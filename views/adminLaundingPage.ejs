<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- <link rel="stylesheet" href="./filtering.css"> -->
    <link rel="stylesheet" href="./adminLaundingPage.css">
    <title>Data Entry System</title>
    <link href="https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css"
     rel="stylesheet">
     <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tw-elements/dist/css/index.min.css" />
    <script  src="https://cdn.tailwindcss.com"></script>
    <script src="./canvasjs.min.js"></script>
    <script src='https://cdn.jsdelivr.net/npm/pdfmake@latest/build/pdfmake.min.js'></script>
    <script src='https://cdn.jsdelivr.net/npm/pdfmake@latest/build/vfs_fonts.min.js'></script>
    <!-- html-to-pdfmake file: -->
    <script src="https://cdn.jsdelivr.net/npm/html-to-pdfmake/browser.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"
      integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
    <script src="https://cdn.taislwindcss.com"></script>
    <script src="../resources/tailwind.config.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js" integrity="sha512-GsLlZN/3F2ErC5ifS5QtgpiJtWd43JWSuIgh7mbzZ8zBps+dvLusV+eNQATqgA/HdeKFVgA5v3S/cIrLF7QnIg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.3/jspdf.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js" integrity="sha512-BNaRQnYJYiPSqHHDb58B0yaPfCu+Wgds8Gp/gU33kqBtgNS4tSPHuGibyoeqMV/TJlSKda6FXzoEyYGjTe+vXA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://github.com/MrRio/jsPDF/tree/master/src/modules"></script>
    <script src="https://github.com/MrRio/jsPDF/tree/master/src/libs"></script>
    <script src="jspdf.min.js"></script>
    <script src="jspdf.plugin.autotable.min.js"></script>
    <script src='https://unpkg.com/jspdf-autotable@2.3.2'></script> 
    <script src = "https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.4.1/html2canvas.js" > </script>
    <script src = "https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.4/jspdf.debug.js" > </script>

  </head>
  <body >
      <div id="data_entry" >
        <div class="header ">
            <div class="heading">Data Entry System</div>
            <div class="admin" id="user-mode-name"><%= username %></div>
            <form id="btn" action="/logout" method="get">
                <button type="submit"
                style="background: linear-gradient(
                  to right, #0f0c29, #302b63, #24243e 
                );"
                class="button-logout bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded">
                    LOGOUT
                </button>
            </form>
        </div>
        <div id="container" style="display: none; " >
            <div class="filtering-condition-content" >
              <div class="filtering-condition-form" style=" display: flex; flex-direction:row; justify-content:space-around">
                <form  action="/filtered-result-bar" method="post" class="form" id="filterForm">
                  <div id="title-name-content"> 
                    Filtering Condition :
                  </div>
                  <div class="from-date-condition-content">
                    From :
                    <input type="date" name="fromDateCondition" id="from-date-condition-input"  />
                  </div>
                  <div class="to-date-condition-content">
                    To:
                    <input type="date" name="toDateCondition" id="to-date-condition-input"  />
                  </div>
                  <div class="chart-condition-content">
                    <div class="chart-condition" id="chart-condition-select-content">
                      <p id="chart-Condition-topic" style="display:inline-block"> Report :</p>
                      <select name="chartCondition" id="chart-condition-input" required>
                        <option value="DPV (Defects Per Vehicle) Report">DPV (Defects Per Vehicle) Report</option>
                        <option value="Master Report">Master Report</option>
                        <option value="Main Pareto Report">Main Pareto Report</option>
                        <option value="Pareto Report">Pareto Report</option>
                        <option value="Surface Summary">Surface Summary</option>
                        <option value="Body Fitting Summary">Body Fitting Summary</option>
                        <option value="Missing & Wrong Part Summary">Missing & Wrong Part Summary</option>
                        <option value="Welding Summary">Welding Summary</option>
                        <option value="Water Leak Summary">Water Leak Summary</option>
                        <option value="Color Map">Color Map</option>
                      </select>
                    </div>
                    </div>
                    <div class="button_container">
                      <button type="button" id="filtering-condition-submit-button" onclick="validate('bar')"
                      style="background: linear-gradient(
                      to right, #0f0c29, #302b63, #24243e 
                      );"
                      class=" bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded"
                      >Generate</button>
                     <button type="button" id="htmlToPdf" onclick="UniPDf()"
                     style="background: linear-gradient(
                      to right, #0f0c29, #302b63, #24243e 
                      );"
                      class="download_btn bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded"         
                      >Export</button>
                    </div>
                     
                </div>
              </form>
            </div> 
          </div>
        <!-- Tailwind Card Sample Code -->
        <div class="flex justify-center mt-10 l" id="filter-container"  >
            <div style="box-shadow: 0 0 1em rgba(0, 0, 0, 0.0625) ; min-width: 60vw; min-height: 60vh;background: linear-gradient(
              to right, #2c3e50, #4ca1af
            );" 
             class="block p-6 rounded-3xl shadow-lg   " >
             <form  action="/filtered-result-card" method="post" id="filterForm">
                <h5  class=" text-2xl leading-tight font-medium flex justify-center m-5 -mb-10">Filtering Condition</h5>
                <div class="footer ml-5 m-5" >
                    <div id="date">
                        <div class="from-date-condition-content" style="font-size: rem; margin: 1.25rem;">From :                
                            <input type="date" name="fromDateCondition" id="from-date-condition-input-card">
                        </div>     
                        <div class="to-date-condition-content -ml-5">To :
                            <input type="date" name="toDateCondition" id="to-date-condition-input-card" placeholder="select date" >
                         </div>           
                    </div>
                    <div id="chart-condition-select-content" style="margin-left: -1.5rem;" >
                        <p style="display: inline-block; " >Report :</p>
                          <select style="color: black ; display: inline-block;" name="chartCondition" id="chart-condition-input-card" required >
                            <option value="DPV (Defects Per Vehicle) Report">DPV (Defects Per Vehicle) Report</option>
                            <option value="Master Report">Master Report</option>
                            <option value="Main Pareto Report">Main Pareto Report</option>
                            <option value="Pareto Report">Pareto Report</option>
                            <option value="Surface Summary">Surface Summary</option>
                            <option value="Body Fitting Summary">Body Fitting Summary</option>
                            <option value="Missing & Wrong Part Summary">Missing & Wrong Part Summary</option>
                            <option value="Welding Summary">Welding Summary</option>
                            <option value="Water Leak Summary">Water Leak Summary</option>
                            <option value="Color Map">Color Map</option>
                          </select>
                    </div>
                    <div id="submit">
                        <button onClick = "validate('card')" type="button" id="filtering-condition-submit-button"
                        style="background: linear-gradient(
                          to right, #0f0c29, #302b63, #24243e 
                        );"
                         class="m-5 bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded">
                            GENERATE
                        </button>
                        <button onClick = "UniPDf()" type="button" id="htmlToPdf"
                          style="background: linear-gradient(
                            to right, #0f0c29, #302b63, #24243e 
                          );"
                           class="download_btn m-5 bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded">
                              EXPORT
                        </button>
                    </div>
                </div>
              </form>
            </div>
          </div>
          <div  id="reportParent" class="report-content">
            <div id="report-topic">
              <p id="report-topic-data"></p>
            </div>
            <div id="reportChild" class="report-content-data">
            </div>
          </div>
        </div>

    <!-- <div>
      <div  class="nav-bar">
          <div id="user-mode-name">
            <%= username %>
          </div>
          <div class="app-name-div">
            <h2 id="app-name">Data Entry System</h2>
          </div>
          <div class="button-logout-content">
            <form action="/logout" method="get">
              <button type="submit"
              class="button-logout bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded"
              >Log-out</button>
            </form>
          </div>     
      </div>
      <div class="filtering-condition-content">
        <div class="filtering-condition-form">
          <form  action="/filtered-result" method="post" id="filterForm">
            <div id="title-name-content"> 
              Filtering Condition :
            </div>
            <div class="from-date-condition-content">
              From :
              <input type="date" name="fromDateCondition" id="from-date-condition-input" required/>
            </div>
            <div class="to-date-condition-content">
              To:
              <input type="date" name="toDateCondition" id="to-date-condition-input" required />
            </div>
            <div class="chart-condition-content">
              <div id="chart-condition-select-content">
                <p id="chart-Condition-topic" style="display:inline-block"> Report :</p>
                <select name="chartCondition" id="chart-condition-input" required>
                  <option value="DPV (Defects Per Vehicle) Report">DPV (Defects Per Vehicle) Report</option>
                  <option value="Master Report">Master Report</option>
                  <option value="Main Pareto Report">Main Pareto Report</option>
                  <option value="Pareto Report">Pareto Report</option>
                  <option value="Surface Summary">Surface Summary</option>
                  <option value="Body Fitting Summary">Body Fitting Summary</option>
                  <option value="Missing & Wrong Part Summary">Missing & Wrong Part Summary</option>
                  <option value="Welding Summary">Welding Summary</option>
                  <option value="Water Leak Summary">Water Leak Summary</option>
                </select>
              </div>
              </div>
              <button type="button" id="filtering-condition-submit-button"
              class=" bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded"
              onclick="validate()">Generate</button>
               <button type="button" id="htmlToPdf" 
              class="download_btn  bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded"         
              onclick="UniPDf()">Export</button> 
          </div>
        </form>
      </div>
      <div  id="reportParent" class="report-content">
        <div id="report-topic">
          <p id="report-topic-data"></p>
        </div>
        <div id="reportChild" class="report-content-data">
        </div>
      </div>
    </div> -->
    
  </body>

    <script>

       var tbl;
      var firstSection;

      document.getElementById('from-date-condition-input-card').valueAsDate = new Date();
      document.getElementById('to-date-condition-input-card').valueAsDate = new Date();

      // Function for GENERATE Button
      function validate(ownerForm){
        if(ownerForm == 'card'){
          document.getElementById('from-date-condition-input').value = document.getElementById('from-date-condition-input-card').value
          document.getElementById('to-date-condition-input').value = document.getElementById('to-date-condition-input-card').value
          document.getElementById('chart-condition-input').value = document.getElementById('chart-condition-input-card').value
        }
        var filterForm = document.getElementById('filterForm')
        let container = document.getElementById('container');
        let filter_container = document.getElementById('filter-container');
        container.style.display = 'inline-block';
        filter_container.style.display = 'none';
        if (!filterForm.checkValidity()) {
          if (filterForm.reportValidity) {
            filterForm.reportValidity();
          } else {
            alert(msg.ieErrorForm);
          }
        } else {
          var reportContentData = document.getElementsByClassName("report-content-data")[0];
          var childNodes = reportContentData.childNodes;
          Object.values(childNodes).map((child) => child.remove())
          if(document.getElementById('tabDivision')){
            console.log('entering')
            document.getElementById('report-topic').removeChild(document.getElementById('tabDivision'))
          }
          document.getElementById('report-topic-data').innerHTML = ''
          generateReport()
        }
      }

      function generateReport(){
        var report = document.getElementById('chart-condition-input').value;
        document.getElementById('report-topic').style.color = '#ffffff'
        document.getElementById('report-topic-data').innerHTML = document.getElementById('chart-condition-input').value
        switch(report){
          case 'DPV (Defects Per Vehicle) Report': dpv(); break;
          case 'Master Report': master(); break;
          case 'Main Pareto Report': mainPareto(); break;
          case 'Pareto Report': pareto(); break;
          case 'Surface Summary': individualSummary('Surface',['Dent','Bump','Burrs','Spatters','Others']); break;
          case 'Body Fitting Summary': individualSummary('Body Fitting',['Body Fitting 1','Body Fitting 2','Body Fitting 3','Body Fitting Others']); break;
          case 'Missing & Wrong Part Summary': individualSummary('Missing & Wrong Part',['Missing Part', 'Wrong Part']); break;
          case 'Welding Summary': individualSummary('Welding', ['Welding Part 1','Welding Part 2','Welding Part 3','Welding Part Others']); break;
          case 'Water Leak Summary': individualSummary('Water Leak',['Water Leak 1','Water Leak 2','Water Leak Others']); break;
          case 'Color Map': colorMap(); break;
          default: break;
        }
      }

      function dpv(){
        var fromDate = document.getElementById('from-date-condition-input').value
        var toDate = document.getElementById('to-date-condition-input').value

        var querySender = {
          'UB': [`SELECT * FROM defect_table WHERE category='UNDER BODY' and defect='Surface';`,`SELECT * FROM defect_table WHERE category='UNDER BODY' and defect='Body Fitting';`,`SELECT * FROM defect_table WHERE category='UNDER BODY' and defect='Missing & Wrong Part';`,`SELECT * FROM defect_table WHERE category='UNDER BODY' and defect='Welding';`,`SELECT * FROM defect_table WHERE category='UNDER BODY' and defect='Water Leak';`],
          'MB': [`SELECT * FROM defect_table WHERE (category='LH MAIN BODY' or category='RH MAIN BODY') and defect='Surface'`,`SELECT * FROM defect_table WHERE (category='LH MAIN BODY' or category='RH MAIN BODY') and defect='Body Fitting'`,`SELECT * FROM defect_table WHERE (category='LH MAIN BODY' or category='RH MAIN BODY') and defect='Missing & Wrong Part'`,`SELECT * FROM defect_table WHERE (category='LH MAIN BODY' or category='RH MAIN BODY') and defect='Welding'`,`SELECT * FROM defect_table WHERE (category='LH MAIN BODY' or category='RH MAIN BODY') and defect='Water Leak'`],
          'SB SA': [`SELECT * FROM defect_table WHERE (category='LH SHELL BODY SUB-LINE' or category='RH SHELL BODY SUB-LINE') and defect='Surface'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY SUB-LINE' or category='RH SHELL BODY SUB-LINE') and defect='Body Fitting'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY SUB-LINE' or category='RH SHELL BODY SUB-LINE') and defect='Missing & Wrong Part'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY SUB-LINE' or category='RH SHELL BODY SUB-LINE') and defect='Welding'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY SUB-LINE' or category='RH SHELL BODY SUB-LINE') and defect='Water Leak'`],
          'SB ML': [`SELECT * FROM defect_table WHERE (category='LH SHELL BODY MAIN-LINE' or category='RH SHELL BODY MAIN-LINE') and defect='Surface'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY MAIN-LINE' or category='RH SHELL BODY MAIN-LINE') and defect='Body Fitting'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY MAIN-LINE' or category='RH SHELL BODY MAIN-LINE') and defect='Missing & Wrong Part'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY MAIN-LINE' or category='RH SHELL BODY MAIN-LINE') and defect='Welding'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY MAIN-LINE' or category='RH SHELL BODY MAIN-LINE') and defect='Water Leak'`],
          'SM': [`SELECT * FROM defect_table WHERE (category='LEFT SIDE MEMBER' or category='RH SIDE MEMBER') and defect='Surface'`,`SELECT * FROM defect_table WHERE (category='LEFT SIDE MEMBER' or category='RH SIDE MEMBER') and defect='Body Fitting'`,`SELECT * FROM defect_table WHERE (category='LEFT SIDE MEMBER' or category='RH SIDE MEMBER') and defect='Missing & Wrong Part'`,`SELECT * FROM defect_table WHERE (category='LEFT SIDE MEMBER' or category='RH SIDE MEMBER') and defect='Welding'`,`SELECT * FROM defect_table WHERE (category='LEFT SIDE MEMBER' or category='RH SIDE MEMBER') and defect='Water Leak'`],
        }
        
        fetch('http://localhost:8000/reportDataProvider', {
          method: 'POST',
          headers: {
            'Content-type': 'application/json'
          },
          body: JSON.stringify({
            querySender,
            fromDate,
            toDate,
          })
        }).then((response) => response.json()).then((data) => {
          console.log(data.data)

          document.getElementById('report-topic-data').innerHTML = document.getElementById('chart-condition-input').value

          var reportContentData = document.getElementsByClassName('report-content-data')
          reportContentData[0].style.color = '#ffffff'


          tbl = document.createElement('table');
          tbl.id="my-table"
          tbl.style.width = '80%';
          tbl.style.marginLeft = '10%'
          tbl.style.marginTop = '4%'
          tbl.style.border = '1px solid #64666a'
          tbl.style.borderRadius = '4px'
          tbl.setAttribute('border', '1');
          reportContentData[0].appendChild(tbl)

          var tblRowforHeading = document.createElement('tr')
          tbl.appendChild(tblRowforHeading)

          var tableHeading = ['Section','Surface','Body Fitting','Missing & Wrong Part', 'Welding', 'Water Leak', 'Total', 'Total DPV']

          tableHeading.map( (singleHeading) => {
            var tblHeading = document.createElement('th')
            tblHeading.style.backgroundColor = '#000000'
            tblHeading.style.padding = '1%'
            tblHeading.style.fontSize = '100%'
            tblHeading.innerHTML = singleHeading
            tblRowforHeading.appendChild(tblHeading)
          })

          var horizontalTotalArray = [0,0,0,0,0]
          var horizontalTotalDPVArray = [0,0,0,0,0]
          var individualDefectTotal = [0,0,0,0,0]


          var i=0;

          for(let [key,value] of Object.entries(data.data)){
            var tblRowforData = document.createElement('tr')
            tbl.appendChild(tblRowforData)

            var tblDataforDefectName = document.createElement('td')
            tblDataforDefectName.innerHTML = key
            tblDataforDefectName.style.backgroundColor = '#000000'
            tblDataforDefectName.style.padding = '0.5%'
            tblRowforData.appendChild(tblDataforDefectName)

            for(let j=0; j< value.length; j++){
              var tblDataforDefectName = document.createElement('td')
              tblDataforDefectName.innerHTML = value[j]
              tblDataforDefectName.style.padding = '0.5%'
              tblDataforDefectName.style.textAlign = 'center'
              tblRowforData.appendChild(tblDataforDefectName)

              horizontalTotalArray[i] += value[j]

              individualDefectTotal[j] += value[j]
            }
            var tblDataforTotal = document.createElement('td')
            tblDataforTotal.innerHTML = horizontalTotalArray[i]
            tblDataforTotal.style.padding = '0.5%'
            tblDataforTotal.style.textAlign = 'center'
            tblRowforData.appendChild(tblDataforTotal)

            var tblDataforTotalDPV = document.createElement('td')
            horizontalTotalDPVArray[i] = (horizontalTotalArray[i]/data.uniqueBodyNumberData.length)
            tblDataforTotalDPV.innerHTML = horizontalTotalDPVArray[i].toFixed(2)
            tblDataforTotalDPV.style.padding = '0.5%'
            tblDataforTotalDPV.style.textAlign = 'center'
            tblRowforData.appendChild(tblDataforTotalDPV)

            i++;
          }

          var tblRowforTotal = document.createElement('tr')
          tbl.appendChild(tblRowforTotal)

          var tblDataforTotal = document.createElement('td')
          tblDataforTotal.innerHTML = 'Total'
          tblDataforTotal.style.backgroundColor = '#000000'
          tblDataforTotal.style.padding = '0.5%'
          tblRowforTotal.appendChild(tblDataforTotal)

          for(let j = 0; j < individualDefectTotal.length; j++){
            var tblDataforIndividualDefect = document.createElement('td')
            tblDataforIndividualDefect.innerHTML = individualDefectTotal[j]
            tblDataforIndividualDefect.style.padding = '0.5%'
            tblDataforIndividualDefect.style.textAlign = 'center'
            tblRowforTotal.appendChild(tblDataforIndividualDefect) 
          }

          var tblDataforHorizontalTotal = document.createElement('td')
          const horizontalTotal = horizontalTotalArray.reduce((partialSum, a) => partialSum + a, 0);
          tblDataforHorizontalTotal.innerHTML = horizontalTotal
          tblDataforHorizontalTotal.style.padding = '0.5%'
          tblDataforHorizontalTotal.style.textAlign = 'center'
          tblRowforTotal.appendChild(tblDataforHorizontalTotal)

          var tblDataforHorizontalTotalDPV = document.createElement('td')
          const horizontalTotalDPV = horizontalTotalDPVArray.reduce((partialSum, a) => partialSum + a, 0);
          tblDataforHorizontalTotalDPV.innerHTML = horizontalTotalDPV.toFixed(2)
          tblDataforHorizontalTotalDPV.style.padding = '0.5%'
          tblDataforHorizontalTotalDPV.style.textAlign = 'center'
          tblRowforTotal.appendChild(tblDataforHorizontalTotalDPV)

          var tblRowforProduction = document.createElement('tr')
          tbl.appendChild(tblRowforProduction)

          var tblDataforProduction = document.createElement('td')
          // tblDataforProduction.style.colSpan = '7'
          
          tblDataforProduction.innerHTML = 'Line off(Production)'
          tblDataforProduction.colSpan = '7'
          tblDataforProduction.style.padding = '0.5%'
          tblDataforProduction.style.textAlign = 'right'
          tblDataforProduction.style.paddingRight = '2%'
          tblDataforProduction.style.fontSize = '120%'
          tblRowforProduction.appendChild(tblDataforProduction)

          var tblDataforBodyNumbers = document.createElement('td')
          tblDataforBodyNumbers.innerHTML = data.uniqueBodyNumberData.length
          tblDataforBodyNumbers.style.padding = '0.5%'
          tblDataforBodyNumbers.style.textAlign = 'center'
          tblRowforProduction.appendChild(tblDataforBodyNumbers)
          console.log("tblDataforProduction", tblDataforProduction)

          
        }).catch((error) => {
          console.log(error)
        })

      }

      // Master Report Function
     async function master(){
        var fromDate = document.getElementById('from-date-condition-input').value
        var toDate = document.getElementById('to-date-condition-input').value

        var querySender = {
          'UB': [`SELECT * FROM defect_table WHERE category='UNDER BODY' and defect='Surface';`,`SELECT * FROM defect_table WHERE category='UNDER BODY' and defect='Body Fitting';`,`SELECT * FROM defect_table WHERE category='UNDER BODY' and defect='Missing & Wrong Part';`,`SELECT * FROM defect_table WHERE category='UNDER BODY' and defect='Welding';`,`SELECT * FROM defect_table WHERE category='UNDER BODY' and defect='Water Leak';`],
          'MB': [`SELECT * FROM defect_table WHERE (category='LH MAIN BODY' or category='RH MAIN BODY') and defect='Surface'`,`SELECT * FROM defect_table WHERE (category='LH MAIN BODY' or category='RH MAIN BODY') and defect='Body Fitting'`,`SELECT * FROM defect_table WHERE (category='LH MAIN BODY' or category='RH MAIN BODY') and defect='Missing & Wrong Part'`,`SELECT * FROM defect_table WHERE (category='LH MAIN BODY' or category='RH MAIN BODY') and defect='Welding'`,`SELECT * FROM defect_table WHERE (category='LH MAIN BODY' or category='RH MAIN BODY') and defect='Water Leak'`],
          'SB SA': [`SELECT * FROM defect_table WHERE (category='LH SHELL BODY SUB-LINE' or category='RH SHELL BODY SUB-LINE') and defect='Surface'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY SUB-LINE' or category='RH SHELL BODY SUB-LINE') and defect='Body Fitting'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY SUB-LINE' or category='RH SHELL BODY SUB-LINE') and defect='Missing & Wrong Part'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY SUB-LINE' or category='RH SHELL BODY SUB-LINE') and defect='Welding'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY SUB-LINE' or category='RH SHELL BODY SUB-LINE') and defect='Water Leak'`],
          'SB ML': [`SELECT * FROM defect_table WHERE (category='LH SHELL BODY MAIN-LINE' or category='RH SHELL BODY MAIN-LINE') and defect='Surface'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY MAIN-LINE' or category='RH SHELL BODY MAIN-LINE') and defect='Body Fitting'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY MAIN-LINE' or category='RH SHELL BODY MAIN-LINE') and defect='Missing & Wrong Part'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY MAIN-LINE' or category='RH SHELL BODY MAIN-LINE') and defect='Welding'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY MAIN-LINE' or category='RH SHELL BODY MAIN-LINE') and defect='Water Leak'`],
          'SM': [`SELECT * FROM defect_table WHERE (category='LEFT SIDE MEMBER' or category='RH SIDE MEMBER') and defect='Surface'`,`SELECT * FROM defect_table WHERE (category='LEFT SIDE MEMBER' or category='RH SIDE MEMBER') and defect='Body Fitting'`,`SELECT * FROM defect_table WHERE (category='LEFT SIDE MEMBER' or category='RH SIDE MEMBER') and defect='Missing & Wrong Part'`,`SELECT * FROM defect_table WHERE (category='LEFT SIDE MEMBER' or category='RH SIDE MEMBER') and defect='Welding'`,`SELECT * FROM defect_table WHERE (category='LEFT SIDE MEMBER' or category='RH SIDE MEMBER') and defect='Water Leak'`],
        }
        
        const response = await fetch('http://localhost:8000/reportDataProvider', {
          method: 'POST',
          headers: {
            'Content-type': 'application/json'
          },
          body: JSON.stringify({
            querySender,
            fromDate,
            toDate,
          })
        })
        const data = await response.json();

        // calculating these 3
        var horizontalTotalArray = [0,0,0,0,0]
        var horizontalTotalDPVArray = [0,0,0,0,0]
        var individualDefectTotal = [0,0,0,0,0]

        let groupDefectData = {}
        Object.keys(data.data).map( (group , iIndex) => {
          groupDefectData[group] = {}
          data.data[group].map ( (defectCount, jIndex) => {
            horizontalTotalArray[iIndex] += defectCount
            individualDefectTotal[jIndex] += defectCount
            switch(jIndex){
              case 0: groupDefectData[group]['Surface'] = defectCount; break;
              case 1: groupDefectData[group]['Body Fitting'] = defectCount; break;
              case 2: groupDefectData[group]['Missing & Wrong Part'] = defectCount; break;
              case 3: groupDefectData[group]['Welding'] = defectCount; break;
              case 4: groupDefectData[group]['Water Leak'] = defectCount; break;
              default: groupDefectData[group]['defect'] = defectCount; break;
            }
          })
          horizontalTotalDPVArray[iIndex] = (horizontalTotalArray[iIndex]/data.uniqueBodyNumberData.length)
        })

        console.log('Group Defects Data: ',groupDefectData)
                
        let individualGroupWiseChartDataset = []
        // sorting
        Object.keys(groupDefectData).map( (group) => {
          groupDefectData[group] = Object.entries(groupDefectData[group])
            .sort(([, a], [, b]) => b - a)
            .reduce(
              (r, [k, v]) => ({
                ...r,
                [k]: v
              }),
              {}
            )

          // creating dataset for individualGroupWisechart
          let singleGroupChartDataset = []
          Object.keys(groupDefectData[group]).map( (defect) => {
            singleGroupChartDataset.push({ y: groupDefectData[group][defect], label: defect })
          })
          individualGroupWiseChartDataset.push(singleGroupChartDataset)
        })
        
        document.getElementById('report-topic-data').innerHTML = document.getElementById('chart-condition-input').value
        var reportContentData = document.getElementsByClassName('report-content-data')
        reportContentData[0].style.color = '#ffffff'

        var tableHeading = ['Section','Surface','Body Fitting','Missing & Wrong Part', 'Welding', 'Water Leak', 'Total', 'Total DPV']

        const horizontalTotal = horizontalTotalArray.reduce((partialSum, a) => partialSum + a, 0);
        const horizontalTotalDPV = horizontalTotalDPVArray.reduce((partialSum, a) => partialSum + a, 0);

        function findMajorDefect(position){
          switch(position){
            case 0: return 'Surface';break;
            case 1: return 'Body Fitting';break;
            case 2: return 'Missing & Wrong Part';break;
            case 3: return 'Welding';break;
            case 4: return 'Water Leak';break;
            default: break;
          }
        }

        const majorDefectsInAllGroup = {
          'UB': findMajorDefect(data.data.UB.indexOf(Math.max(...data.data.UB))),
          'MB': findMajorDefect(data.data.MB.indexOf(Math.max(...data.data.MB))),
          'SB SA': findMajorDefect(data.data['SB SA'].indexOf(Math.max(...data.data['SB SA']))),
          'SB ML': findMajorDefect(data.data['SB ML'].indexOf(Math.max(...data.data['SB ML']))),
          'SM': findMajorDefect(data.data.SM.indexOf(Math.max(...data.data.SM))),
        }
        const newResponse = await fetch('http://localhost:8000/majorDefectDetail' , {
          method: 'POST',
          headers: {
            'Content-type': 'application/json'
          },
          body: JSON.stringify({
            majorDefectsInAllGroup,
            fromDate,
            toDate,
          })
        })

        const majorDefectsDataAllGroup = await newResponse.json()
        const majorDefectsDataInAllGroup = majorDefectsDataAllGroup.data;

        console.log('majorDefectsInAllGroup:',majorDefectsInAllGroup)
        console.log('majorDefectsDataInAllGroup:',majorDefectsDataInAllGroup)
        
        // sorting majorDefectsDataInAllGroup based on defectCount of each DefectType
        Object.keys(majorDefectsDataInAllGroup).map( (groupName) => {
          majorDefectsDataInAllGroup[groupName] = Object.entries(majorDefectsDataInAllGroup[groupName])
            .sort(([, a], [, b]) => b - a)
            .reduce(
              (r, [k, v]) => ({
                ...r,
                [k]: v
              }),
              {}
            )
        })

        console.log('sortedMajorDefectsDataInAllGroup: ', Object.keys(majorDefectsDataInAllGroup['UB']))

        const majorSubDefectsInAllGroup = JSON.parse(JSON.stringify(majorDefectsDataInAllGroup))
        // populating the object with each group's maximum subDefects and value
        Object.keys(majorDefectsDataInAllGroup).map( (group) => {
          //getting the first property and its value in descendingly sorted object
          let maxSubdefect = {}
          maxSubdefect[Object.keys(majorDefectsDataInAllGroup[group])[0]] = majorDefectsDataInAllGroup[group][Object.keys(majorDefectsDataInAllGroup[group])[0]]
          majorSubDefectsInAllGroup[group] = maxSubdefect
        })

        console.log('majorSubDefectsInAllGroup: ', majorSubDefectsInAllGroup)

        const majorSubDefectsResponse = await fetch('http://localhost:8000/majorSubDefectDetail' , {
          method: 'POST',
          headers: {
            'Content-type': 'application/json'
          },
          body: JSON.stringify({
            majorSubDefectsInAllGroup,
            fromDate,
            toDate
          })
        })

        const majorSubDefectsDataInAllGroup = await majorSubDefectsResponse.json()

        console.log('majorSubDefectsDataInAllGroup: ',majorSubDefectsDataInAllGroup.data)

        // sorting majorSubDefectsDataInAllGroup.data in descending based on no of zones
        let sortedMajorSubDefectsDataInAllGroup= JSON.parse(JSON.stringify(majorSubDefectsDataInAllGroup.data))

        Object.keys(majorSubDefectsDataInAllGroup.data).map( (groupName) => {
          // counting no of zones in each subCategory
          Object.keys(majorSubDefectsDataInAllGroup.data[groupName]).map( (subCategoryName) =>{
            sortedMajorSubDefectsDataInAllGroup[groupName][subCategoryName] = sortedMajorSubDefectsDataInAllGroup[groupName][subCategoryName].length;
          })
          // sorting based on Zone Count & storing it in duplicate Obj
          sortedMajorSubDefectsDataInAllGroup[groupName] = Object.entries(sortedMajorSubDefectsDataInAllGroup[groupName])
            .sort(([, a], [, b]) => b - a)
            .reduce(
              (r, [k, v]) => ({
                ...r,
                [k]: v
              }),
              {}
            )
          // arranging the data in original obj by referrring sorted duplicate Obj
          let temp = {}
          Object.keys(sortedMajorSubDefectsDataInAllGroup[groupName]).map( (subCategoryName) => {
            temp[subCategoryName] = majorSubDefectsDataInAllGroup.data[groupName][subCategoryName]
          })
          majorSubDefectsDataInAllGroup.data[groupName] = temp
        })

        // const array = [    
        //   { y: 3, label: "Dent" },
        //   { y: 0,  label: "Bump" },
        //   { y: 0,  label: "Burrs" },
        //   { y: 0,  label: "Spatters" },
        //   { y: 0,  label: "Others" },
        // ]

        const labelSetForMajorDefects = []
        const labelSetForMajorDefectsTitle = Object.values(majorDefectsInAllGroup)
        Object.keys(majorDefectsDataInAllGroup).map( (group) => {
          let tempArr = []
          Object.keys(majorDefectsDataInAllGroup[group]).map( (defect) => {
            tempArr.push({y: majorDefectsDataInAllGroup[group][defect] , label: defect})
          })
          labelSetForMajorDefects.push(tempArr)
        } )

        console.log('labelSetForMajorDefects: ', labelSetForMajorDefects)
        
        // console.log('Total DPV: ', horizontalTotalDPV)
        // console.log('Category wise: ', individualDefectTotal)
        // console.log('Group wise: ', horizontalTotalArray)
        // console.log('Individual Group defects:',data.data)
        // console.log('Group wise Total DPV: ',horizontalTotalDPVArray)


        var reportContent = document.getElementsByClassName('report-content-data')[0]

        var firstSection = document.createElement('div')
        firstSection.id = 'firstSection'
        firstSection.style.marginTop = '3%'
        reportContent.appendChild(firstSection)

        var totalDPV = document.createElement('div')
        totalDPV.id = 'totalDPV'
        totalDPV.style.width = '30%'
        totalDPV.style.marginLeft = '2%'
        firstSection.appendChild(totalDPV)

        var totalDPVChart= new CanvasJS.Chart("totalDPV", {
          animationEnabled: true,
          backgroundColor: "rgba(0, 0, 0, 0)",
          theme: "dark1", // "light1", "light2", "dark1", "dark2"
          title:{
            text: "Total DPV",
            fontFamily: 'tahoma',
            fontSize: 18,
          },
          dataPointWidth: 35,
          axisY: {
            title: "Defects",
            titleFontFamily: 'tahoma',
            gridThickness: 0,
              stripLines: [
                {
                  value: 0,
                  showOnTop: true,
                  color: "gray",
                  thickness: 2
                }
              ]
          },
          data: [{        
            type: "column",  
            dataPoints: [      
              { y: horizontalTotalDPV , label: 'Vehicle'},
            ]
          }]
        });

        totalDPVChart.render();


        var categoryWise = document.createElement('div')
        categoryWise.id = 'categoryWise'
        categoryWise.style.width = '30%'
        categoryWise.style.marginLeft = '35%'
        firstSection.appendChild(categoryWise)

        var categoryWiseChart = new CanvasJS.Chart("categoryWise", {
          animationEnabled: true,
          backgroundColor: "rgba(0, 0, 0, 0)",
          theme: "dark1",
          title:{
            text: "Defect Based Visualization",
            fontFamily: 'tahoma',
            fontSize: 18,
            // horizontalAlign: "left"
          },
          data: [{
            type: "doughnut",
            startAngle: 60,
            // innerRadius: 70,
            indexLabelFontSize: 15,
            indexLabel: "{label} - {y}, #percent%",
            toolTipContent: "<b>{label}:</b> {y} (#percent%)",
            dataPoints: [
              { y: individualDefectTotal[0], label: "Surface" },
              { y: individualDefectTotal[1], label: "Body Fitting" },
              { y: individualDefectTotal[2], label: "Missing & Wrong Part" },
              { y: individualDefectTotal[3], label: "Welding"},
              { y: individualDefectTotal[4], label: "Water Leak"},
            ]
          }]
        });

        categoryWiseChart.render();

        // console.log('categoryWiseChart: ',categoryWiseChart)


        var groupWise = document.createElement('div')
        groupWise.id = 'groupWise'
        groupWise.style.width = '30%'
        groupWise.style.marginLeft = '68%'
        firstSection.appendChild(groupWise)

        // function for navigating to the corresponding group function
        function masterNavigate(event){
          document.getElementById(`${event.dataPoint.label.replace(' ','')}_GroupTotalDPV`).scrollIntoView({ behavior: "smooth" })
          // console.log('id: ',event.dataPoint.label.replace(' ',''))
        }

        var groupWiseChart = new CanvasJS.Chart("groupWise", {
          animationEnabled: true,
          backgroundColor: "rgba(0, 0, 0, 0)",
          theme: "dark1",
          title:{
            text: "Category Based Visualization",
            fontFamily: 'tahoma',
            fontSize: 18,
            // horizontalAlign: "left"
          },
          data: [{
            type: "doughnut",
            startAngle: 60,
            // innerRadius: 70,
            indexLabelFontSize: 15,
            indexLabel: "{label} - {y}, #percent%",
            toolTipContent: "<b>{label}:</b> {y} (#percent%)",
            dataPoints: [
              { y: horizontalTotalArray[0], label: "UB" ,click: masterNavigate},
              { y: horizontalTotalArray[1], label: "MB" ,click: masterNavigate},
              { y: horizontalTotalArray[2], label: "SB SA" ,click: masterNavigate},
              { y: horizontalTotalArray[3], label: "SB ML" ,click: masterNavigate},
              { y: horizontalTotalArray[4], label: "SM" ,click: masterNavigate},
            ]
          }]
        });

        groupWiseChart.render();


        const groupName = ['UNDER BODY', 'MAIN BODY', 'SHELL BODY SUB-LINE','SHELL BODY MAIN-LINE','SIDE MEMBER']
        const groupID = ['UB','MB','SBSA','SBML','SM']
        const groupKeyForDataObj = ['UB','MB','SB SA','SB ML','SM']

        var groupDPVChart = [];
        var individualGroupWisechart = [];
        var groupWiseMajorDefectChart = [];
        var groupWiseMajorSubDefectChart = [];
        var divElementHolder = document.createElement('div')
        divElementHolder.style.marginTop='33%'
        divElementHolder.id = 'AllGroupChartDivision'
        reportContent.appendChild(divElementHolder)


        Object.keys(groupDefectData).map((group , i) => {
          var divElement = document.createElement('div');
          divElement.id=`${groupID[i]}`
          divElement.style.marginBottom = `27%`
          divElementHolder.appendChild(divElement)

          var groupTitleDiv = document.createElement('div')
          groupTitleDiv.id = `${groupID[i]}_titleName`
          groupTitleDiv.style.textAlign = 'center'
          if(i>0){
            groupTitleDiv.style.paddingTop = '4%'
          }
          groupTitleDiv.style.marginBottom = '3%'
          divElement.appendChild(groupTitleDiv)

          var groupTitleContent = document.createElement('p')
          groupTitleContent.innerHTML = groupName[i]
          groupTitleContent.style.fontSize = '130%'
          groupTitleDiv.appendChild(groupTitleContent)

          var horizontalRule = document.createElement('hr')
          groupTitleDiv.appendChild(horizontalRule)

          // division for groupTotalDPVData
          var groupTotalDPVDivision = document.createElement('div')
          groupTotalDPVDivision.id = `groupTotalDPVDivision`
          divElement.appendChild(groupTotalDPVDivision)

          var groupTotalDPVData = document.createElement('p')
          groupTotalDPVData.id = `${groupID[i]}_GroupTotalDPV`
          groupTotalDPVData.style.textAlign = 'center'
          groupTotalDPVData.style.marginTop = '-2%'
          groupTotalDPVData.style.fontSize = '100%'
          groupTotalDPVData.innerHTML = `${groupName[i]} DPV: ${horizontalTotalDPVArray[i]}`
          groupTotalDPVDivision.appendChild(groupTotalDPVData)


          var categoryWiseChartDivision= document.createElement('div')
          categoryWiseChartDivision.id=`${groupID[i]}_Category_DPV`
          categoryWiseChartDivision.style.width = '30%'
          categoryWiseChartDivision.style.marginLeft = '2%'
          categoryWiseChartDivision.style.marginTop = '3.5%'
          divElement.appendChild(categoryWiseChartDivision)

          individualGroupWisechart.push(new CanvasJS.Chart(categoryWiseChartDivision.id, {
            animationEnabled: true,
            backgroundColor: "rgba(0, 0, 0, 0)",
            theme: "dark1", // "light1", "light2", "dark1", "dark2"
            title:{
              text: "Defect Visualization",
              fontFamily: 'tahoma',
              fontSize: 18,
            },
            dataPointWidth: 30,
            axisX: {
              labelFontSize: 10,
            },
            axisY: {
              title: "Total no of defects",
              gridThickness: 0,
              stripLines: [
                {
                  value: 0,
                  showOnTop: true,
                  color: "gray",
                  thickness: 2
                }
              ]
            },
            data: [{        
              type: "column",  
              dataPoints: individualGroupWiseChartDataset[i]
            }]
          }));

          individualGroupWisechart[i].render();


          var groupWiseMajorDefectChartDivision= document.createElement('div')
          groupWiseMajorDefectChartDivision.id=`${groupID[i]}_GroupWise_Major_Defect_Counts`
          groupWiseMajorDefectChartDivision.style.width = '30%'
          groupWiseMajorDefectChartDivision.style.marginLeft = '35%' // 68%
          divElement.appendChild(groupWiseMajorDefectChartDivision)

          groupWiseMajorDefectChart.push(new CanvasJS.Chart(groupWiseMajorDefectChartDivision.id, {
            animationEnabled: true,
            backgroundColor: "rgba(0, 0, 0, 0)",
            theme: "dark1", // "light1", "light2", "dark1", "dark2"
            title:{
              text: `${majorDefectsInAllGroup[[groupKeyForDataObj[i]]]} Visualization`, //${labelSetForMajorDefectsTitle[i]} Category
              fontFamily: 'tahoma',
              fontSize: 18,
            },
            dataPointWidth: 30,
            axisX: {
              labelFontSize: 10,
            },
            axisY: {
              title: "Total no of defects",
              gridThickness: 0,
              stripLines: [
                {
                  value: 0,
                  showOnTop: true,
                  color: "gray",
                  thickness: 2
                }
              ]
            },
            data: [{        
              type: "column",  
              dataPoints: labelSetForMajorDefects[i]
            }]
          }))

          groupWiseMajorDefectChart[i].render();



          var groupWiseMajorSubDefectChartDivision= document.createElement('div')
          groupWiseMajorSubDefectChartDivision.id=`${groupID[i]}_GroupWise_Major_SubDefect_Counts`
          groupWiseMajorSubDefectChartDivision.style.width = '30%'
          groupWiseMajorSubDefectChartDivision.style.marginLeft = '68%'
          divElement.appendChild(groupWiseMajorSubDefectChartDivision)

          // generating data attribute individual Group's Major subDefect
          let singleGroupChartMainData = []
          let chartConfigurationBlockAccess= true;
            // storing all the zones in list for chartStacked configuration
          let TotalZones = []
          Object.keys(majorSubDefectsDataInAllGroup.data[groupKeyForDataObj[i]]).map( (subCategoryName) => {
            TotalZones.push(...majorSubDefectsDataInAllGroup.data[groupKeyForDataObj[i]][subCategoryName])
          })
          let TotalZonesSet = new Set(TotalZones)
          TotalZones = Array.from(TotalZonesSet)
          // console.log('Total Zones: ',TotalZones)

          TotalZones.map( (singleZone) => {
            let dataPoints = []
            Object.keys(majorSubDefectsDataInAllGroup.data[groupKeyForDataObj[i]]).map( (subCategoryName) => {
              if(majorSubDefectsDataInAllGroup.data[groupKeyForDataObj[i]][subCategoryName].includes(singleZone)){
                dataPoints.push({y:1, label: subCategoryName})
              }else{
                dataPoints.push({y:0, label: subCategoryName})
              }
            })
            singleGroupChartMainData.push({
              type: 'stackedColumn',
              name: singleZone,
              // showInLegend: true,
              dataPoints: dataPoints
            })
          })
          // console.log('singleGroupChartMainData: ',singleGroupChartMainData);

          groupWiseMajorSubDefectChart.push(new CanvasJS.Chart(groupWiseMajorSubDefectChartDivision.id, {
            animationEnabled: true,
            backgroundColor: "rgba(0, 0, 0, 0)",
            theme: "dark1", // "light1", "light2", "dark1", "dark2"
            title:{
              text: `${Object.keys(majorSubDefectsInAllGroup[groupKeyForDataObj[i]])[0]} Visualization`, //${labelSetForMajorDefectsTitle[i]} Category
              fontFamily: 'tahoma',
              fontSize: 18,
            },
            dataPointWidth: 30,
            axisX: {
              labelFontSize: 7,
            },
            axisY: {
              title: "Total no of defects",
              gridThickness: 0,
              stripLines: [
                {
                  value: 0,
                  showOnTop: true,
                  color: "gray",
                  thickness: 2
                }
              ]
            },
            toolTip: {
              content: '{label} - {name} : {y}'
            },
            data: singleGroupChartMainData
          }))
          groupWiseMajorSubDefectChart[i].render();
        })
      }


      async function mainPareto(){
        document.getElementById('report-topic-data').innerHTML = document.getElementById('chart-condition-input').value
        var fromDate = document.getElementById('from-date-condition-input').value
        var toDate = document.getElementById('to-date-condition-input').value
        console.log('main Pareto');

        const response = await fetch('http://localhost:8000/pareto',{
          method: 'POST',
          headers:{
            'Content-type': 'application/json',
          },
          body: JSON.stringify({
            fromDate,
            toDate,
          })
        })
        const data = await response.json()
        console.log('data: ', data.data)

        // creating 5 divisions
        // displaying only the selected one
        let defectList = ['Surface','Body Fitting','Missing & Wrong Part', 'Welding', 'Water Leak']
          // 5 tabs
        const tabDivision = document.createElement('div')
        tabDivision.id = 'tabDivision'
        tabDivision.style.marginLeft = '20%'
        document.getElementById('report-topic').appendChild(tabDivision)
        document.getElementById('report-topic-data').style.cssFloat = 'left'
        

        // function for only showing corresponding defect division
        function showDefectPareto(clickedDefect){
          // hiding all division
          const paretoDivisions = document.getElementsByClassName('defectParetoDivision')
          const defectParetoButtons = document.getElementsByClassName('defectParetoButton')
          Object.keys(paretoDivisions).map( (singleDefectDivision, index) => {
            paretoDivisions[singleDefectDivision].style.display = 'none'
            defectParetoButtons[index].style.color = '#ffffff'
            defectParetoButtons[index].style.backgroundColor = '#000000'
          })
          // showing only clicked Defect Division
          document.getElementById(`${clickedDefect}ParetoDivision`).style.display = 'block'
          document.getElementById(`${clickedDefect}ParetoButton`).style.color = '#000000'
          document.getElementById(`${clickedDefect}ParetoButton`).style.backgroundColor = '#ffffff'
        }
        
 
        // element creation for main Pareto
        defectList.map( (defect) => {
          // creating buttons for defect inside tabDivision
          let defectParetoButton = document.createElement('button')
          defectParetoButton.onclick = () => showDefectPareto(`${defect.replace(' ','')}`)
          defectParetoButton.id = `${defect.replace(' ','')}ParetoButton`
          defectParetoButton.className = 'defectParetoButton'
          defectParetoButton.innerHTML = `${defect}`
          defectParetoButton.style.backgroundColor = '#000000'
          defectParetoButton.style.color = '#ffffff'
          defectParetoButton.style.cssFloat = 'left'
          defectParetoButton.style.fontSize = '80%'
          defectParetoButton.style.padding = '0.6% 4%'
          // defectParetoButton.style.paddingRight = '1%'
          tabDivision.appendChild(defectParetoButton)

          // creating division for each Defect Pareto
          let correspondingTabDivision = document.createElement('div')
          correspondingTabDivision.id = `${defect.replace(' ','')}ParetoDivision`
          correspondingTabDivision.style.color = '#ffffff'
          correspondingTabDivision.style.clear = 'left'
          correspondingTabDivision.className = 'defectParetoDivision'
          document.getElementsByClassName('report-content-data')[0].appendChild(correspondingTabDivision)

          //
          let contentInsideTabDivision = document.createElement('p')
          contentInsideTabDivision.innerHTML = `${defect} Pareto Visualization`
          correspondingTabDivision.appendChild(contentInsideTabDivision)

          // showing only Surface Division
          if(defect == 'Surface'){
            correspondingTabDivision.style.display = 'block'
            defectParetoButton.style.backgroundColor = '#ffffff'
            defectParetoButton.style.color = '#000000'
          }else{
            correspondingTabDivision.style.display = 'none'
          }
        })
        
      }

      //! Pareto Report
      async function pareto(){
        document.getElementById('report-topic-data').innerHTML = document.getElementById('chart-condition-input').value
        var fromDate = document.getElementById('from-date-condition-input').value
        var toDate = document.getElementById('to-date-condition-input').value
        console.log('pareto');

        const response = await fetch('http://localhost:8000/pareto',{
          method: 'POST',
          headers:{
            'Content-type': 'application/json',
          },
          body: JSON.stringify({
            fromDate,
            toDate,
          })
        })
        const data = await response.json()

        console.log('data', data.data)
        // for Category-SubCategory Pareto Chart
        let groupCountProvider = {}
        let groupCategoryCountProvider= {}
        // for Sub-Category - Zone Pareto Chart
        let categoryCountProvider = {}
        let categoryZoneCountProvider = {}
        // for Zone-Defect Pareto Chart
        let zoneCountProvider = {}
        let zoneDefectCountProvider = {}
        // for Defect-SubDefect Pareto Chart
        let defectCountProvider = {}
        let defectSubDefectCountProvider = {}
        

        // counting no of defects in each bodyNumber, category, defect, subDefect, bodyNumber
        // storing count in 
        Object.keys(data.data).map( (group)=> {
          let groupCount = 0
          groupCategoryCountProvider[group] = {}
          Object.keys(data.data[group]).map( (category) => {
            let categoryCount = 0
            categoryZoneCountProvider[category] = {}
            Object.keys(data.data[group][category]).map( (defect) => {
              let defectCount = 0
              if(!defectSubDefectCountProvider[defect]){
                defectSubDefectCountProvider[defect] = {}
              }
              Object.keys(data.data[group][category][defect]).map( (subDefect) => {
                let subDefectCount = 0
                Object.keys(data.data[group][category][defect][subDefect]).map( (bodyNumber) => {
                  let bodyNumberCount = data.data[group][category][defect][subDefect][bodyNumber].length
                  
                  let zones = data.data[group][category][defect][subDefect][bodyNumber]
                  zones.map( (singleZone) => {
                    // adding zones into zones object
                    if(!zoneCountProvider[`_${singleZone}`]){
                      zoneCountProvider[`_${singleZone}`] = 1
                    }else{
                      zoneCountProvider[`_${singleZone}`] += 1
                    }
                      // for Zone & Defect Count
                    if(!zoneDefectCountProvider[`_${singleZone}`]){
                      zoneDefectCountProvider[`_${singleZone}`] = {}
                      if(!zoneDefectCountProvider[`_${singleZone}`][`${defect}_${singleZone}`]){
                        zoneDefectCountProvider[`_${singleZone}`][`${defect}_${singleZone}`] = 1
                      }
                    }else{
                      if(!zoneDefectCountProvider[`_${singleZone}`][`${defect}_${singleZone}`]){
                        zoneDefectCountProvider[`_${singleZone}`][`${defect}_${singleZone}`] = 1
                      }else{
                        zoneDefectCountProvider[`_${singleZone}`][`${defect}_${singleZone}`] += 1
                      }
                    }
                    
                    // adding zones into category object and keep tracking count
                    if(!categoryZoneCountProvider[category][`_${singleZone}`]){
                      categoryZoneCountProvider[category][`_${singleZone}`] = 1
                    }else{
                      categoryZoneCountProvider[category][`_${singleZone}`] += 1
                    }
                  })  
                  subDefectCount += bodyNumberCount
                })
                if(!defectSubDefectCountProvider[defect][subDefect]){
                  defectSubDefectCountProvider[defect][subDefect] = subDefectCount
                }else{
                  defectSubDefectCountProvider[defect][subDefect] += subDefectCount
                }
                defectCount += subDefectCount
              })
              if(!defectCountProvider[defect]){
                defectCountProvider[defect] = defectCount
              }else{
                defectCountProvider[defect] += defectCount
              }
              categoryCount += defectCount
            })
            groupCategoryCountProvider[group][category] = categoryCount
            categoryCountProvider[category] = categoryCount
            groupCount += categoryCount
          })
          groupCountProvider[group] = groupCount
        })

        // first Pareto chart
        groupCountProvider = Object.entries(groupCountProvider)
          .sort(([, a], [, b]) => b - a)
          .reduce(
            (r, [k, v]) => ({
              ...r,
              [k]: v
            }),
            {}
          )

        let categoryList = []
        Object.keys(groupCategoryCountProvider).map( (group) => {
          // console.log('On each Category iteration: ',groupCategoryCountProvider[group])
          // console.log('Before sort: ',Object.keys(groupCategoryCountProvider[group]))
          groupCategoryCountProvider[group] = Object.entries(groupCategoryCountProvider[group])
          .sort(([, a], [, b]) => b - a)
          .reduce(
            (r, [k, v]) => ({
              ...r,
              [k]: v
            }),
            {}
          )
          // console.log('Before sort: ',Object.keys(groupCategoryCountProvider[group]))
          categoryList.push(...Object.keys(groupCategoryCountProvider[group]))
        })


        // second Pareto chart
        categoryCountProvider = Object.entries(categoryCountProvider)
          .sort(([, a], [, b]) => b - a)
          .reduce(
            (r, [k, v]) => ({
              ...r,
              [k]: v
            }),
            {}
          )

        let nTopCategory = 20;

        // having only top Categories, deleting others
        let exceptnTopCategory = Object.keys(categoryCountProvider).filter(x => !Object.keys(categoryCountProvider).slice(0,nTopCategory).includes(x))
        exceptnTopCategory.map( (singleCategory) => {
          delete categoryCountProvider[singleCategory]
          delete categoryZoneCountProvider[singleCategory]
        })

        let zoneList = []

        Object.keys(categoryZoneCountProvider).map( (category) => {
          categoryZoneCountProvider[category] = Object.entries(categoryZoneCountProvider[category])
          .sort(([, a], [, b]) => b - a)
          .reduce(
            (r, [k, v]) => ({
              ...r,
              [k]: v
            }),
            {}
          )

          let nTopCategoryZone = 20
          let exceptnTopCategoryZone = Object.keys(categoryZoneCountProvider[category]).filter(x => !Object.keys(categoryZoneCountProvider[category]).slice(0,nTopCategoryZone).includes(x))
          // console.log('except Top Category Zone: ',exceptnTopCategoryZone)
          exceptnTopCategoryZone.map( (singleZone)=> {
            delete categoryZoneCountProvider[category][singleZone]
          })

          zoneList.push(...Object.keys(categoryZoneCountProvider[category]))
        })

        // third Pareto chart
        zoneCountProvider = Object.entries(zoneCountProvider)
          .sort(([, a], [, b]) => b - a)
          .reduce(
            (r, [k, v]) => ({
              ...r,
              [k]: v
            }),
            {}
          )
        
        let nTopZone = 20

        let exceptnTopZone = Object.keys(zoneCountProvider).filter(x => !Object.keys(zoneCountProvider).slice(0,nTopZone).includes(x))
        exceptnTopZone.map( (singleZone) => {
          delete zoneCountProvider[singleZone]
          delete zoneDefectCountProvider[singleZone]
        })
        
        let defectList = []
        Object.keys(zoneDefectCountProvider).map( (zone) => {
          zoneDefectCountProvider[zone] = Object.entries(zoneDefectCountProvider[zone])
          .sort(([, a], [, b]) => b - a)
          .reduce(
            (r, [k, v]) => ({
              ...r,
              [k]: v
            }),
            {}
          )
          defectList.push(...Object.keys(zoneDefectCountProvider[zone]))
        })

        // fourth Pareto Chart
        defectCountProvider = Object.entries(defectCountProvider)
          .sort(([, a], [, b]) => b - a)
          .reduce(
            (r, [k, v]) => ({
              ...r,
              [k]: v
            }),
            {}
          )

        let subDefectList = []
        Object.keys(defectSubDefectCountProvider).map( (defect) => {
          defectSubDefectCountProvider[defect] = Object.entries(defectSubDefectCountProvider[defect])
          .sort(([, a], [, b]) => b - a)
          .reduce(
            (r, [k, v]) => ({
              ...r,
              [k]: v
            }),
            {}
          )
          subDefectList.push(...Object.keys(defectSubDefectCountProvider[defect]))
        })


        console.log('Group Count Provider: ',groupCountProvider)
        console.log('Group Category Count Provider: ',groupCategoryCountProvider)
        console.log('Category Count Provider: ',categoryCountProvider)
        console.log('Category Zone Count Provider: ',categoryZoneCountProvider)
        console.log('Zone Count Provider: ',zoneCountProvider)
        console.log('Zone Defect Count Provider: ',zoneDefectCountProvider)
        console.log('Defect Count Provider: ',defectCountProvider)
        console.log('Defect Sub-Defect Count Provider: ',defectSubDefectCountProvider)
  
        // first Pareto chart
        const mainParetoCategoryChartDivision= document.createElement('div')
        mainParetoCategoryChartDivision.id = 'mainParetoCategoryChartDivision'
        document.getElementsByClassName('report-content-data')[0].appendChild(mainParetoCategoryChartDivision)
        mainParetoCategoryChartDivision.style.width = '80%'
        mainParetoCategoryChartDivision.style.height = '100%'
        mainParetoCategoryChartDivision.style.marginLeft = '10%'

        let mainParetoCategoryChartDataset = []

        function subCategoryParetoNavigate(){
          document.getElementById(`mainParetoSubCategoryChartDivision`).scrollIntoView({ behavior: "smooth" })
        }
        // populating data attribute for mainPareto Category Visualization
        categoryList.map( (category,index) => {
          let dataPoints = []
          Object.keys(groupCountProvider).map( (group) => {
            let yValue = 0
            if(groupCategoryCountProvider[group][category]){
              yValue = groupCategoryCountProvider[group][category]
            }
            dataPoints.push({label: group, y: yValue, click: subCategoryParetoNavigate})
            categoryList[index].replace(`${group}`,'')
            // console.log(categoryList[index])
          })
          mainParetoCategoryChartDataset.push({
            type:'stackedColumn',
            // showInLegend: true,
            name: category,
            dataPoints: dataPoints
          })
        })

        // console.log('mainParetoCategoryChartDataset: ',mainParetoCategoryChartDataset)

        // chart configuration
        var mainParetoCategoryChart= new CanvasJS.Chart("mainParetoCategoryChartDivision", {
          animationEnabled: true,
          backgroundColor: "rgba(0, 0, 0, 0)",
          theme: "dark1",
          title:{
            text: "Category Pareto Visualization",
            fontFamily: 'tahoma',
            fontSize: 18,
          },
          dataPointWidth: 30,
          axisY: {
            title: "No of Defects",
            lineColor: "#4F81BC",
            tickColor: "#4F81BC",
            labelFontColor: "#4F81BC",
            labelFontFamily: 'tahoma',
            labelFontSize: 18,
            gridThickness: 0,
            stripLines: [
              {
                value: 0,
                showOnTop: true,
                color: "gray",
                thickness: 2
              }
            ]
          },
          axisX:{
            title: 'Category',
            labelFontColor: "#4F81BC",
            labelFontFamily: 'tahoma',
            labelFontSize: 18,
            gridThickness: 0,
            tickLength: 0,
            lineThickness: 0,
            // labelFormatter: function(){
            //   return " ";
            // }
          },
          toolTip: {
            content: '{name} : {y}'
          },
          data: mainParetoCategoryChartDataset
        });
        mainParetoCategoryChart.render();


        // second Pareto chart
        const mainParetoSubCategoryChartDivision = document.createElement('div')
        mainParetoSubCategoryChartDivision.id = 'mainParetoSubCategoryChartDivision'
        document.getElementsByClassName('report-content-data')[0].appendChild(mainParetoSubCategoryChartDivision)
        mainParetoSubCategoryChartDivision.style.width = '80%'
        mainParetoSubCategoryChartDivision.style.height = '100%'
        mainParetoSubCategoryChartDivision.style.marginLeft = '10%'

        let mainParetoSubCategoryChartDataset = []

        function zoneParetoNavigate(){
          document.getElementById(`mainParetoZoneChartDivision`).scrollIntoView({ behavior: "smooth" })
        }

        // populating data attribute for main Pareto Visualization
        zoneList.map( (zone) => {
          let dataPoints = []
          Object.keys(categoryCountProvider).map( (category) => {
            let yValue = 0
            if(categoryZoneCountProvider[category][zone]){
              yValue = categoryZoneCountProvider[category][zone]
            }
            dataPoints.push({label: category, y: yValue, click: zoneParetoNavigate})
          })
          mainParetoSubCategoryChartDataset.push({
            type:'stackedColumn',
            // showInLegend: true,
            name: `Z${zone.replace('_','')}`,
            dataPoints: dataPoints
          })
        })

        // console.log('mainParetoSubCategoryChartDataset: ',mainParetoSubCategoryChartDataset)

        // chart configuration
        var mainParetoSubCategoryChart= new CanvasJS.Chart("mainParetoSubCategoryChartDivision", {
          animationEnabled: true,
          backgroundColor: "rgba(0, 0, 0, 0)",
          theme: "dark1",
          title:{
            text: "Sub-Category Visualization",
            fontFamily: 'tahoma',
            fontSize: 18,
          },
          dataPointWidth: 30,
          axisY: {
            title: "No of Defects",
            lineColor: "#4F81BC",
            tickColor: "#4F81BC",
            labelFontColor: "#4F81BC",
            labelFontFamily: 'tahoma',
            labelFontSize: 18,
            gridThickness: 0,
            stripLines: [
              {
                value: 0,
                showOnTop: true,
                color: "gray",
                thickness: 2
              }
            ]
          },
          axisX:{
            title: 'Sub-Category',
            labelFontColor: "#4F81BC",
            labelFontFamily: 'tahoma',
            labelFontSize: 18,
            gridThickness: 0,
            tickLength: 0,
            lineThickness: 0,
            labelFormatter: function(){
              return " ";
            }
          },
          toolTip: {
            content: '{label} - {name} : {y}'
          },
          data: mainParetoSubCategoryChartDataset
        });
        mainParetoSubCategoryChart.render();


        // third Pareto chart
        const mainParetoZoneChartDivision = document.createElement('div')
        mainParetoZoneChartDivision.id = 'mainParetoZoneChartDivision'
        document.getElementsByClassName('report-content-data')[0].appendChild(mainParetoZoneChartDivision)
        mainParetoZoneChartDivision.style.width = '80%'
        mainParetoZoneChartDivision.style.height = '100%'
        mainParetoZoneChartDivision.style.marginLeft = '10%'

        let mainParetoZoneChartDataset = []

        function defectParetoNavigate(){
          document.getElementById(`mainParetoDefectChartDivision`).scrollIntoView({ behavior: "smooth" })
        }

        // populating data attribute for main Pareto Visualization
        defectList.map( (defect) => {
          let dataPoints = []
          Object.keys(zoneCountProvider).map( (zone) => {
            let yValue = 0
            if(zoneDefectCountProvider[zone][defect]){
              yValue = zoneDefectCountProvider[zone][defect]
            }
            dataPoints.push({label: zone.replace('_',''), y: yValue, click: defectParetoNavigate})
          })
          mainParetoZoneChartDataset.push({
            type:'stackedColumn',
            // showInLegend: true,
            name: defect.split('_')[0],
            dataPoints: dataPoints
          })
        })

        console.log('mainParetoZoneChartDataset: ',mainParetoZoneChartDataset)

        // chart configuration
        var mainParetoZoneChart= new CanvasJS.Chart("mainParetoZoneChartDivision", {
          animationEnabled: true,
          backgroundColor: "rgba(0, 0, 0, 0)",
          theme: "dark1",
          title:{
            text: "Zone Pareto Visualization",
            fontFamily: 'tahoma',
            fontSize: 18,
          },
          dataPointWidth: 30,
          axisY: {
            title: "No of Defects",
            lineColor: "#4F81BC",
            tickColor: "#4F81BC",
            labelFontColor: "#4F81BC",
            labelFontFamily: 'tahoma',
            labelFontSize: 18,
            gridThickness: 0,
            stripLines: [
              {
                value: 0,
                showOnTop: true,
                color: "gray",
                thickness: 2
              }
            ]
          },
          axisX:{
            title: 'Zones',
            labelFontColor: "#4F81BC",
            labelFontFamily: 'tahoma',
            labelFontSize: 18,
            gridThickness: 0,
            tickLength: 0,
            lineThickness: 0,
          },
          toolTip: {
            content: '{name} : {y}'
          },
          data: mainParetoZoneChartDataset
        });
        mainParetoZoneChart.render();


        // fourth Pareto chart
        const mainParetoDefectChartDivision = document.createElement('div')
        mainParetoDefectChartDivision.id = 'mainParetoDefectChartDivision'
        document.getElementsByClassName('report-content-data')[0].appendChild(mainParetoDefectChartDivision)
        mainParetoDefectChartDivision.style.width = '80%'
        mainParetoDefectChartDivision.style.height = '100%'
        mainParetoDefectChartDivision.style.marginLeft = '10%'

        let mainParetoDefectChartDataset = []

        // const subDefectList = ['Dent','Bump','Burrs','Spatters','Others','Body Fitting 1','Body Fitting 2', 'Body Fitting Others','Missing Part','Wrong Part','Welding Part 1', 'Welding Part 2', 'Welding Part 3','Welding Part Others', 'Water Leak 1', 'Water Leak 2', 'Water Leak Others']

        // populating data attribute for main Pareto Visualization
        subDefectList.map( (subDefect) => {
          let dataPoints = []
          Object.keys(defectCountProvider).map( (defect) => {
            let yValue = 0
            if(defectSubDefectCountProvider[defect][subDefect]){
              yValue = defectSubDefectCountProvider[defect][subDefect]
            }
            dataPoints.push({label: defect, y:yValue})
          })
          mainParetoDefectChartDataset.push({
            type:'stackedColumn',
            // showInLegend: true,
            name: subDefect,
            dataPoints: dataPoints
          })
        })

        // chart configuration
        var mainParetoDefectChart= new CanvasJS.Chart("mainParetoDefectChartDivision", {
          animationEnabled: true,
          backgroundColor: "rgba(0, 0, 0, 0)",
          theme: "dark1",
          title:{
            text: "Defect Pareto Visualization",
            fontFamily: 'tahoma',
            fontSize: 18,
          },
          dataPointWidth: 30,
          axisY: {
            title: "No of Defects",
            lineColor: "#4F81BC",
            tickColor: "#4F81BC",
            labelFontColor: "#4F81BC",
            labelFontFamily: 'tahoma',
            labelFontSize: 18,
            gridThickness: 0,
            stripLines: [
              {
                value: 0,
                showOnTop: true,
                color: "gray",
                thickness: 2
              }
            ]
          },
          axisX:{
            title: 'Defect',
            gridThickness: 0,
            tickLength: 0,
            lineThickness: 0,
          },
          toolTip: {
            content: '{name} : {y}'
          },
          data: mainParetoDefectChartDataset
        });
        mainParetoDefectChart.render();
      }

      async function individualSummary(defectName, subDefectList){
        document.getElementById('report-topic-data').innerHTML = document.getElementById('chart-condition-input').value
        console.log(defectName,'Summary');

        var fromDate = document.getElementById('from-date-condition-input').value
        var toDate = document.getElementById('to-date-condition-input').value

        const response = await fetch('http://localhost:8000/individualSummaryReport',{
          method: 'POST',
          headers:{
            'Content-type': 'application/json'
          },
          body: JSON.stringify({
            defectName,
            subDefectList,
            fromDate,
            toDate
          })
        })

        const data = await response.json()

        console.log('data: ',data.data)
      }

      async function colorMap(){
        document.getElementById('report-topic-data').innerHTML = document.getElementById('chart-condition-input').value
        console.log(document.getElementById('chart-condition-input').value);

        const reportContentData = document.getElementsByClassName('report-content-data')[0]
        var fromDate = document.getElementById('from-date-condition-input').value
        var toDate = document.getElementById('to-date-condition-input').value

        const response = await fetch('http://localhost:8000/colorMap',{
          method:'POST',
          headers:{
            'Content-type': 'application/json',
          },
          body: JSON.stringify({
            fromDate,
            toDate
          })
        })

        const data = await response.json()

        console.log('data: ',data.data)

        const categoryAbbreviation = {
          'UB': 'Under Body',
          'MB': 'Main Body',
          'SBSA': 'Shell Body Sub-Line',
          'SBML': 'Shell Body Main-Line',
          'SM': 'Side Member'
        }

        Object.keys(data.data).map( (category) => {
          // division for main Category
          const categoryDivision = document.createElement('div')
          categoryDivision.id = `${category}ColorMap`
          categoryDivision.style.clear = 'left'
          reportContentData.appendChild(categoryDivision)

          // category name
          const categoryName = document.createElement('p')
          categoryName.id =  `${category}TopicElemet`
          categoryName.innerHTML = categoryAbbreviation[category]
          categoryName.style.color = '#ffffff'
          categoryName.style.fontSize = '110%'
          categoryName.style.marginLeft = '4%'
          categoryDivision.appendChild(categoryName)

          Object.keys(data.data[category]).map( (subCategory) => {
            // division for sub Category
            const subCategoryDivision = document.createElement('div')
            subCategoryDivision.id = `${subCategory}ColorMap`
            subCategoryDivision.style.clear = 'left'
            categoryDivision.appendChild(subCategoryDivision)

            // subCategory name
            const subCategoryName = document.createElement('p')
            subCategoryName.id = `${subCategory}TopicElement`
            subCategoryName.innerHTML = subCategory.replace(`${category}`,'')
            subCategoryName.style.color = '#ffffff'
            subCategoryName.style.fontSize = '100%'
            subCategoryName.style.textAlign = 'center'
            subCategoryDivision.appendChild(subCategoryName)

            Object.keys(data.data[category][subCategory]).map( (defect) => {
              // division for defects
              const defectDivision = document.createElement('div')
              defectDivision.id = `${defect}ColorMap`
              defectDivision.style.clear = 'left'
              // defectDivision.style.marginBottom = '1%'
              subCategoryDivision.appendChild(defectDivision)

              // defect name
              const defectName = document.createElement('p')
              defectName.id = `${defect}_${subCategory.replace(`${category}`,'')}`
              defectName.innerHTML = defect
              defectName.style.color = '#ffffff'
              defectName.style.fontSize = '90%'
              defectName.style.marginLeft = '6%'
              defectDivision.appendChild(defectName)

              // subDefect Container
              const subDefectContainer = document.createElement('div')
              subDefectContainer.id = `${subCategory.replace(`${category}`,'')}_${defect}_Container`
              subDefectContainer.style.clear = 'left'
              subDefectContainer.style.marginLeft = '8%'
              subDefectContainer.style.display = 'flex'
              defectDivision.appendChild(subDefectContainer)

              Object.keys(data.data[category][subCategory][defect]).map( (subDefect) => {
                // division for subDefects
                const subDefectDivision = document.createElement('div')
                subDefectDivision.id = `${subDefect}ColorMap`
                subDefectDivision.style.marginLeft = '1%'
                subDefectContainer.appendChild(subDefectDivision)

                //subDefect name
                const subDefectName = document.createElement('p')
                subDefectName.id = `${subDefect}_${subCategory.replace(`${category}`,'')}`
                subDefectName.innerHTML = subDefect
                subDefectName.style.color = '#ffffff'
                subDefectName.style.fontSize = '80%'
                subDefectDivision.appendChild(subDefectName)

                // division for defect visual presentation
                const visualPresentation = document.createElement('div')
                visualPresentation.id = `${subDefect}_${subCategory.replace(`${category}`,'')}_Visual_Presentation`
                // visualPresentation.style.display = 'inline-block'
                visualPresentation.style.width = '350%'
                visualPresentation.style.height = '100%'
                subDefectDivision.appendChild(visualPresentation)

                let subCategoryArray = subCategory.split(' ').reverse()
                let categoryCodeSplit = subCategoryArray[0]
                let categoryCode = ''
                let sideCodeSplit = subCategoryArray[1]
                let sideCode = ''
                if(Object.keys(categoryAbbreviation).includes(categoryCodeSplit)){
                  categoryCode = categoryAbbreviation[categoryCodeSplit].toUpperCase().replaceAll(' ','_')+'_'
                }else{
                  categoryCode = 'UNDER_BODY_'
                }
                if((sideCodeSplit == 'LH' || sideCodeSplit == 'RH') && (subCategoryArray.indexOf(sideCodeSplit) != subCategoryArray.length-1)){
                  sideCode = sideCodeSplit+'_'
                }

                visualPresentation.style.backgroundImage = `url(${sideCode}${categoryCode}${subCategory.replaceAll(' ','')}.jpg)`

                // console.log('category: ',category)
                // console.log('sub category: ',subCategoryArray)
                // console.log('categoryCodeSplit: ', categoryCodeSplit)
                // console.log('sideCodeSplit: ', sideCodeSplit)
                // console.log('Image name: ',`url(${sideCode}${categoryCode}${subCategory.replaceAll(' ','')}.jpg)`)

                //displaying zones with defect count
                Object.keys(data.data[category][subCategory][defect][subDefect]).map( (singleZone) => {
                  let zoneDefectCountData = document.createElement('p')
                  zoneDefectCountData.innerHTML = `Z ${singleZone.replace('_','')}: ${data.data[category][subCategory][defect][subDefect][singleZone]}`
                  visualPresentation.appendChild(zoneDefectCountData)
                })
              })
            })
          })
        })
      }

      // PDF Section

      // Exporting  Table DPV to PDF

      function UniPDf(eve){
  
    // const input=document.getElementById('reportParent');  
  //   const input=document.getElementsByTagName('body') 

  //   const ans=document.body
  //   const input_2=document.getElementById('reportChild');  
  //   const p1=document.getElementById('from-date-condition-input').value
  //   const p2=document.getElementById('to-date-condition-input').value
  //   const reportValue=document.getElementById('report-topic-data').innerText
  //  console.log("input",input)
  //  console.log("input_2",input_2)
  
  //     // const height=input.scrollHeight+input_2.scrollHeight;
  //       const height=input.offsetHeight;

  //         console.log("input.scrollHeight ",height)
  //    var doc = new jsPDF("p", "mm",'A4',true);
  
  //       // doc.setTextColor(0, 0, 0)
  //       //  doc.setFontType('sans')
  //       //  doc.text(4, 10, String(reportValue))
  //       //  doc.text(106,10,"From : ")
  //       //  doc.text(157,10,"To : ")
         
  //       //  doc.setTextColor(0,0,0)
  //       //  doc.text(125,10,String(p1).split('-').reverse().join('-'))
  //       //  doc.setTextColor(0,0,0)
  //       //  doc.text(168,10,String(p2).split('-').reverse().join('-'))
  
  //           html2canvas(ans, {
  //           logging: 1,
  //           letterRendering: true,
  //           scale: 2,
  //           windowWidth: window.innerWidth,
  //           windowHeight: height,
  //           allowTaint: true,
  //           useCORS: true
  //         }).then((canvas) => {
            
  
  //       var imgData = canvas.toDataURL("image/png");
  //       console.log("image ka data",)
  //       var imgWidth = 210;
  //       var pageHeight = 250;
  //       var imgHeight = (canvas.height * imgWidth) / canvas.width;
      
  //       var heightLeft = imgHeight;
        
  //       var position = 0;
  //       doc.addImage(imgData, "jpeg", 0, position, imgWidth, imgHeight,'','FAST');
      
  //       heightLeft -= pageHeight;
  //       while (heightLeft >= 0) {
  //         position = heightLeft - imgHeight;
  //         console.log("Next page position",position)
  //         doc.addPage();
  //         doc.addImage(imgData, "jpeg", 0, position, imgWidth, imgHeight,'','FAST');
  //         heightLeft -= pageHeight;
  //       }
  
  
  
  //        doc.save("Report.pdf");
      
  //       console.log("Pdf generated");
  
  //     })
        
  
  
  
  // Method to print the pdf of whole page
  var height=document.body.scrollHeight;
  console.log("height",height)
  // console.log('scrollY', window.scrollY);

  html2canvas(document.body, {
                  // windowHeight:height,
                  allowTaint: true,
                  useCORS: true,
                  logging: false,
                  height: window.outerHeight + window.innerHeight,
                  windowHeight: window.outerHeight + window.innerHeight, 
                onrendered:function(canvas) {
  
                    var contentWidth = canvas.width;
                    var contentHeight = canvas.height;
                    console.log("contentHeight",contentHeight)

                    var img = canvas.toDataURL();
  
                    
                    var pageHeight = contentWidth / 592.28 * 841.89;
                    
                    var leftHeight = contentHeight;
                    
                    var position = 0;
                    
                    var imgWidth = 595.28;
                    // var imgHeight = imgWidth/contentWidth * contentHeight;
                    var imgHeight = (contentHeight * imgWidth) / contentWidth
  
                    var pageData = canvas.toDataURL('image/jpeg', 1.0);
  
                    var pdf = new jsPDF('', 'pt', 'a4');
  

                    
                    if (leftHeight < pageHeight) {
                        pdf.addImage(pageData, 'JPEG', 0, 0, imgWidth, imgHeight );
                    } else {
                        while(leftHeight > 0) {
                            pdf.addImage(pageData, 'JPEG', 0, position, imgWidth, imgHeight)
                            leftHeight -= pageHeight;
                            position -= 841.89;
                            
                            if(leftHeight > 0) {
                                pdf.addPage();
                            }
                        }
                    }
                    // console.log(img);
                    // window.open(img)
                    // window.scrollTo(0, document.body.scrollHeight || document.documentElement.scrollHeight);
                    pdf.save('content.pdf');
                } 
            })
  console.log("PDF generated")
   }

   //! Making of graphs 
    function exportFunction(event){

        const input=document.getElementById('aa');  
        // const input=document.getElementById('aa');
        // const input=document.getElementsByClassName('report-content-data')

        console.log('element',input)

        // console.log('element',elemenet)
        // console.log("table",tbl)
        // html2pdf().from(elemenet).save()
        // console.log(event.view.screen.availWidth)
        
        var doc = new jsPDF("p", "mm",'A4', true);
        // console.log('window.innerWidth',window.innerWidth)
        console.log('event',event);
        // console.log('window.innerHeight',window.innerHeight)
        html2canvas(input, {
          logging: true,
          letterRendering: 1,
          scale: 2,
          windowWidth: window.innerWidth,
          windowHeight: 5000,
         
          useCORS: true
        }).then((canvas) => {
          // doc.setFillColor(0, 255, 255)
          // doc.rect(0,-30,1280,2000,'F')

      var imgData = canvas.toDataURL("image/png");
      var imgWidth = 210;
      var pageHeight = 295;
      var imgHeight = (canvas.height * imgWidth) / canvas.width;
      var heightLeft = imgHeight;
      
      var position = 50;
      doc.addImage(imgData, "jpeg", 0, position, imgWidth, imgHeight,'', 'FAST');
      heightLeft -= pageHeight;
      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        doc.addPage();
        doc.addImage(imgData, "jpeg", 0, position, imgWidth, imgHeight, '', 'FAST');
        heightLeft -= pageHeight;
      }

      // const pages = doc.internal.getNumberOfPages();

      // for (let j = 1; j < pages + 1; j++) {
      //   let horizontalPos = imgWidth / 3;
      //   let verticalPos = pageHeight - 1;
      //   doc.setPage(j);
      //   doc.setFontSize(10);

      //   doc.text(`${j} of ${pages}`, horizontalPos, verticalPos, {
      //     align: "center"
      //   });
      // }
    
      doc.save("dashboard.pdf");
      console.log("Pdf generated");
    });
      // var eleme=document.getElementsByClassName('report-content-data')

      // console.log("bhayar",eleme)
      // html2pdf().from(eleme).save("ge");
      // console.log("andar")
      
      // const p1=document.getElementById('from-date-condition-input').value
      // const p2=document.getElementById('to-date-condition-input').value

      //  var doc = new jsPDF('l', 'pt');
      //  var res = doc.autoTableHtmlToJson(tbl);
       
      //  let temp1 = res.rows[6][0]
      //  let temp2 = res.rows[6][1]
      //  res.rows[6] = [undefined,undefined,undefined,undefined,undefined,undefined,temp1,temp2]
      //  console.log('res: ',res)
      

      //  doc.setDrawColor(0,0,0)
      // doc.setLineWidth(1.5)
      // doc.line(120, 40, 650, 40)
      
  
      //  doc.setTextColor(0, 0, 0)
      //  doc.setFontType('bold')
      //  doc.text(123, 33, "Defects Per Vehicle  Report")
      //  doc.text(350,33,"From : ")
      //  doc.text(520,33,"To : ")
       
      //  doc.setTextColor(0,0,0)
      //  doc.text(405,33,String(p1))
      //  doc.setTextColor(0,0,0)
      //  doc.text(557,33,String(p2))

      //  doc.autoTable(res.columns, res.data, {
      //  startY: 100,

      //   });

      //   console.log(res.data)

      // doc.save('DPV.pdf');

      
      }

         // Exporting MASTER REPOTE to PDF

    function masterPdf(){      
      const p1=document.getElementById('from-date-condition-input').value
      const p2=document.getElementById('to-date-condition-input').value
  
  
      const totalCanvasElements = document.getElementsByTagName('canvas')
      // (296.99966mm)11.6929/(420mm)16.5354
  
      var pdf = new jsPDF({
        orientation: "landscape",
        unit: "px",
        format: 'A3'
      });
       pdf.setFillColor(0,0,0)
      pdf.rect(0,0,1280,2000,'F')
      // pdf.rect(0,0,600,500,'F')
      var dataURL = []
      let xValue = 20, yValue = 75
  
      pdf.setDrawColor(255,255,255)
      pdf.setLineWidth(1.5)
      pdf.line(120, 35, 625, 35)
      
  
       pdf.setTextColor(255, 255, 255)
       pdf.setFontType('bold')
       pdf.text(123, 30, "MASTER REPORT")
       pdf.text(350,30,"From : ")
       pdf.text(520,30,"To : ")
       
       pdf.setTextColor(255,255,255)
       pdf.text(400,30,String(p1))
       pdf.setTextColor(255,255,255)
       pdf.text(560,30,String(p2))
    //0 to 35
    for(let i=0; i<totalCanvasElements.length; i++){
      if(i%2==0){ //even elements
        canvasHolder = totalCanvasElements[i]
        dataURL.push(canvasHolder.toDataURL());
      }     
    }
    for(let i=0; i< dataURL.length/2;i++){
      if(i>0){
        if(i % 3 == 0){
          yValue += 180
          xValue = 20
        }
      } 
      pdf.addImage(dataURL[i],'JPEG',xValue,yValue, 250,160)
      xValue += 300
    }
  
  pdf.addPage();
  pdf.setFillColor(0,0,0)
  pdf.rect(0,0,1280,2000,'F')
  
  let mValue=20,nValue=-160
  
    for(let i= dataURL.length/2; i<dataURL.length; i++){
      if(i>0){
        if(i % 3 == 0){
          nValue += 200
          mValue = 20
        }
      } 
      pdf.addImage(dataURL[i],'JPEG',mValue,nValue, 250,180)
      mValue += 300
    }
  
      pdf.save("Master.pdf");
  
  
   }

   // Function to create the pareto graph 
   function paretoPDF(){
      
      const p1=document.getElementById('from-date-condition-input').value
      const p2=document.getElementById('to-date-condition-input').value
       const totalCanvasElements = document.getElementsByTagName('canvas')
     console.log("canvas", totalCanvasElements)

     var pdf = new jsPDF({
        orientation: "landscape",
        unit: "px",
        format: 'A3'
      });
       pdf.setFillColor(0,0,0)
      pdf.rect(0,0,1280,2000,'F')
      // pdf.rect(0,0,600,500,'F')
      var dataURL = []
      let xValue = 70, yValue = 75
  
      pdf.setDrawColor(255,255,255)
      pdf.setLineWidth(1.5)
      pdf.line(170, 35, 675, 35)
      
  
       pdf.setTextColor(255, 255, 255)
       pdf.setFontType('bold')
       pdf.text(173, 30, "PARETO REPORT")
       pdf.text(400,30,"From : ")
       pdf.text(570,30,"To : ")
       
       pdf.setTextColor(255,255,255)
       pdf.text(450,30,String(p1))
       pdf.setTextColor(255,255,255)
       pdf.text(610,30,String(p2))
    //0 to 8
    for(let i=0; i<totalCanvasElements.length; i++){
      if(i%2==0){ //even elements
        canvasHolder = totalCanvasElements[i]
        dataURL.push(canvasHolder.toDataURL());
      }     
    }
    for(let i=0; i< dataURL.length/2;i++){
        pdf.addImage(dataURL[i],'JPEG',xValue,yValue, 750,250)   
        yValue += 280
    }
  
  pdf.addPage();
  pdf.setFillColor(0,0,0)
  pdf.rect(0,0,1280,2000,'F')
  
  let mValue=70,nValue=50
  
    for(let i= dataURL.length/2; i<dataURL.length; i++){
         pdf.addImage(dataURL[i],'JPEG',mValue,nValue, 750,250)   
      nValue += 280
    }
  
      pdf.save("Pareto.pdf");
  

   }

   function Export(){
  var report = document.getElementById('chart-condition-input').value;
  switch (report) {
        case 'DPV (Defects Per Vehicle) Report': exportFunction(); break;
        case 'Master Report': masterPdf(); break;
        case 'Pareto Report': paretoPDF(); break;
        default: break;
      }
 }


// Method to print the pdf of whole page

 function s(){
  
  

var height=document.body.scrollHeight;
console.log("height",height)

html2canvas(document.body, {
                allowTaint: true,
                useCORS: true,
                logging: false,
                height: window.outerHeight + window.innerHeight,
                windowHeight: window.outerHeight + window.innerHeight, 
              onrendered:function(canvas) {

                  var contentWidth = canvas.width;
                  var contentHeight = canvas.height;
                  console.log("contentHeight",contentHeight)

                  var img = canvas.toDataURL();

                  
                  var pageHeight = contentWidth / 592.28 * 841.89;
                  
                  var leftHeight = contentHeight;
                  
                  var position = 0;
                  
                  var imgWidth = 595.28;
                  var imgHeight = (contentHeight * imgWidth) / contentWidth

                  var pageData = canvas.toDataURL('image/jpeg', 1.0);

                  var pdf = new jsPDF('', 'pt', 'a4');


                  
                  if (leftHeight < pageHeight) {
                      pdf.addImage(pageData, 'JPEG', 0, 0, imgWidth, imgHeight );
                  } else {
                      while(leftHeight > 0) {
                          pdf.addImage(pageData, 'JPEG', 0, position, imgWidth, imgHeight)
                          leftHeight -= pageHeight;
                          position -= 841.89;
                          
                          if(leftHeight > 0) {
                              pdf.addPage();
                          }
                      }
                  }
                  pdf.save('content.pdf');
              } 
          })
console.log("PDF generated")
 }

    </script>

  </body>
</html>
