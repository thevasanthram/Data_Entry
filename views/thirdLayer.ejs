<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="./thirdLayer.css" />
    <title>Data Entry System</title>
    <!-- <link
      href="https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css"
      rel="stylesheet"
    /> -->
    <script  src="https://cdn.tailwindcss.com"></script>
    <script src="../resources/tailwind.config.js"></script>
  </head>
  <body>
    <div>
      <div class="header">
        <div style="display: flex; align-items: center">
          <img
            src="./home.png"
            title="Home"
            id="home-icon"
            alt="Home"
            onclick="document.getElementById('followerForm').submit();"
          />
          <div class="heading">Data Entry System</div>
          <p class="selected-message">
            Body Number : <%= enteredBodyNumber %> | Category : <%=
            selectedCategory %> | Sub-Category : <%= selectedSubCategory %>
          </p>
        </div>
        <form id="btn" action="/logout" method="get">
          <div class="admin" id="user-mode-name"><%= username %></div>
          <button
            type="submit"
            style="
              background: linear-gradient(to right, #0f0c29, #302b63, #24243e);
            "
            class="button-logout bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded"
          >
            LOGOUT
          </button>
        </form>
      </div>
      <div id="title-name-content">
        <div class="sub_container">
          <img
            src="./arrow.png"
            title="Back"
            id="go-back-icon"
            alt="Go Back"
            onclick="document.getElementById('secondLayerForm').submit();"
          />
          <p id="title-name">Select Defect :</p>
        </div>
        <!-- Toggle Switch for online / offline -->
        <div id="toggle" class="mt-10 ml-24">
          <div class="flex w-full mb-12">
            <label
              for="toggle_switch"
              class="flex items-center cursor-pointer"
              style="justify-content: center"
            >
              <div class="relative">
                <input
                  type="checkbox"
                  id="toggle_switch"
                  class="sr-only mode"
                  onclick="dynamicText()"
                />
                <div class="block bg-gray-600 w-14 h-8 rounded-full"></div>
                <div
                  class="dot absolute left-1 top-1 bg-white w-6 h-6 rounded-full transition"
                ></div>
              </div>
              <div
                class="ml-2 text-gray-300 font-medium text-2xl"
                id="mode_status"
              >
                Online
              </div>
            </label>
          </div>
        </div>
      </div>

      <div class="main-content">
        <form
          id="defectLayerForm"
          action="/receive-thirdLayer-temp"
          method="post"
        >
          <div class="defect-category-content">
            <div class="defect-title-name">
              <p>Defect :</p>
            </div>
            <% const defectListId = Object.keys(defectObject); let
            subDefectListId = []; let subDefectListName = []; %> <% for (let
            i=0; i < defectListId.length; i++){%>
            <button
              type="button"
              class="defect-category"
              id="<%= defectListId[i] %>-main-defect-button"
              onclick="defectCategorySwitch('<%= defectListId[i] %>')"
            >
              <%= defectObject[defectListId[i]].name%>
            </button>
            <%}%>
          </div>
          <div class="sub-content">
            <div class="sub-defect-title-name">
              <p>Sub-Defect :</p>
            </div>
            <%for ( let i=0; i < defectListId.length; i++){ subDefectListId =
            Object.keys(defectObject[defectListId[i]]['subdefects']);
            subDefectListName =
            Object.values(defectObject[defectListId[i]]['subdefects']); %>
            <div
              id="<%= defectListId[i] %>"
              class="defectName"
              style="display: none"
            >
              <div>
                <%for (let j = 0; j < subDefectListId.length; j++){%>
                <button
                  type="button"
                  class="sub-defect-category <%= defectListId[i] %>-buttons"
                  onclick="subdefectCategorySwitch(event , '<%= defectListId[i] %>-<%= subDefectListId[j] %>')"
                >
                  <%= subDefectListName[j] %>
                </button>
                <%}%>
              </div>
              <div>
                <div class="zones-title-name">
                  <p>Zones</p>
                </div>
                <div id="zone-division<%= i+1 %>">
                  <%for(let k = 0; k < subDefectListId.length; k++){%>
                  <div
                    id="<%= defectListId[i] %>-<%= subDefectListId[k] %>"
                    class="<%= defectListId[i] %>"
                    style="display: none"
                  >
                    <% for (let l = 0; l < ShortlistedSubCategoryOptions.length;
                    l++){%>
                    <div
                      class="<%= categoryId %>_<%= subcategoryId %><%= ShortlistedSubCategoryOptions[l] %>"
                      id="<%= categoryId %>_<%= subcategoryId %>_<%= defectListId[i] %>_<%= subDefectListId[k] %>_<%= l+1 %>"
                    >
                      <input
                        type="number"
                        inputmode="numeric"
                        class="<%= categoryId %>_<%= subcategoryId %>_<%= defectListId[i] %>_<%= subDefectListId[k] %>_<%= l+1 %>"
                        name="<%= defectObject[defectListId[i]].name %>_<%= subDefectListName[k] %>_<%= ShortlistedSubCategoryOptions[l] %>"
                        style="width: 150%"
                        min="1"
                      />
                      <p><%= ShortlistedSubCategoryOptions[l] %></p>
                    </div>
                    <%}%>
                  </div>
                  <%}%>
                </div>
              </div>
            </div>
            <%}%>
          </div>
        </form>
      </div>
      <div class="save-reset-content">
        <button type="button" class="save-button" onclick="validate()">
          Save
        </button>
        <button type="button" class="reset-button" onclick="handleReset()">
          Reset
        </button>
      </div>
      <div>
        <form action="/follower" method="get" id="followerForm"></form>
        <form action="/firstlayer" method="post" id="firstLayerform"></form>
        <form action="/secondlayer" method="post" id="secondLayerForm"></form>
      </div>
    </div>

    <script>
      modeDOM = document.getElementsByClassName('mode')[0];
      var mode = '<%= mode %>';
      if (mode == 'online') {
        modeDOM.checked = true;
        document.getElementById('mode_status').innerHTML = 'Online';
      } else {
        modeDOM.checked = false;
        document.getElementById('mode_status').innerHTML = 'Offline';
      }
      function dynamicText() {
        if (!modeDOM.checked) {
          modeDOM.checked = false;
          document.getElementById('mode_status').innerHTML = 'Offline';
          mode = 'offline';
        } else {
          modeDOM.checked = true;
          document.getElementById('mode_status').innerHTML = 'Online';
          mode = 'online';
        }
      }

      async function transmit(selectedSubCategory) {
        var mode = 'online';
        if (!modeDOM.checked) {
          mode = 'offline';
        }
        const secondLayerForm = document.getElementById('secondLayerForm');
        document.getElementById('selectedSubCategory').value =
          selectedSubCategory;
        document.getElementById('mode').value = mode;
        secondLayerForm.submit();
      }

      // first defect button format (autoselect and auto display)
      document
        .getElementById('<%= defectListId[0] %>')
        .removeAttribute('style');
      document.getElementById(
        '<%= defectListId[0] %>-main-defect-button'
      ).style.background = '#ffffff';
      document.getElementById(
        '<%= defectListId[0] %>-main-defect-button'
      ).style.color = '#000000';

      let defectObj = JSON.parse('<%- JSON.stringify(defectObject) %>');
      const mainDefectId = Object.keys(defectObj);

      // first sub-defect button format (autoselect and auto display)
      for (let i = 0; i < mainDefectId.length; i++) {
        document
          .getElementById(
            mainDefectId[i] +
              '-' +
              Object.keys(defectObj[mainDefectId[i]].subdefects)[0]
          )
          .removeAttribute('style');
        document.getElementsByClassName(
          mainDefectId[i] + '-buttons'
        )[0].style.background = '#ffffff';
        document.getElementsByClassName(
          mainDefectId[i] + '-buttons'
        )[0].style.color = '#000000';
      }

      // code to set corresponding background image for zone-divisions
      for (let i = 1; i <= mainDefectId.length; i++) {
        // console.log(`<%= categoryId %>_<%= subcategoryId %>`);
        document.getElementById('zone-division' + i).style.backgroundImage =
          'url(<%= categoryId %>_<%= subcategoryId %>.jpg)';
      }

      function defectCategorySwitch(clickedDefect) {
        var i;
        var defectCategory = document.getElementsByClassName('defectName');

        //code block to displaying the selected defect division only
        for (i = 0; i < defectCategory.length; i++) {
          defectCategory[i].style.display = 'none';
        }
        document.getElementById(clickedDefect).style.display = 'block';

        //code block to highlight the selected defect button only
        var y = document.getElementsByClassName(event.target.className);
        for (i = 0; i < y.length; i++) {
          y[i].style.background = '#000000';
          y[i].style.color = '#ffffff';
        }
        event.target.style.background = '#ffffff';
        event.target.style.color = '#000000';
      }

      function subdefectCategorySwitch(event, clickedSubDefect) {
        var i;
        var subDefectCategory = document.getElementsByClassName(
          event.target.parentElement.parentElement.id
        );

        // code block to displaying the selected sub-defect division only
        for (i = 0; i < subDefectCategory.length; i++) {
          subDefectCategory[i].style.display = 'none';
        }
        document.getElementById(clickedSubDefect).style.display = 'block';

        //code block to highlight the selected sub-defect button only
        var y = document.getElementsByClassName(
          event.target.parentElement.parentElement.id + '-buttons'
        );
        for (i = 0; i < y.length; i++) {
          y[i].style.background = '#000000';
          y[i].style.color = '#ffffff';
        }
        event.target.style.background = '#ffffff';
        event.target.style.color = '#000000';
      }

      function validate() {
        var defectLayerFormInputElements =
          document.getElementsByTagName('input');
        var checkBoxNotSelectedCount = 0;
        Object.values(defectLayerFormInputElements).map((singleInput) => {
          if (!singleInput.value) {
            checkBoxNotSelectedCount++;
          }
        });
        if (checkBoxNotSelectedCount == defectLayerFormInputElements.length) {
          alert('No Zones were selected as defect. Atleast select a zone');
        } else {
          handleSave();
        }
      }

      async function handleSave() {
        if (confirm('Are you sure want to save?') == true) {
          const defectLayerForm = document.getElementById('defectLayerForm');
          var defectLayerFormData = {};
          var defectLayerFormInputElements =
            document.getElementsByTagName('input');

          Object.values(defectLayerFormInputElements).map(
            (singleInput, index) => {
              if (index != 0) {
                if (singleInput.value) {
                  defectLayerFormData[singleInput.name] = singleInput.value;
                }
              }
            }
          );

          console.log('defectLayerFormData: ', defectLayerFormData);

          //disabling onclick function of the save button, :- save button can be clicked only once.
          const saveButton = document.getElementsByClassName('save-button')[0];
          saveButton.removeAttribute('onclick');

          const zoneCheckerResponse = await fetch(
            'http://localhost:8000/zonechecker',
            {
              method: 'POST',
              headers: {
                'Content-type': 'application/json',
              },
              body: JSON.stringify({
                defectObj: defectLayerFormData,
                mode,
              }),
            }
          );

          const zoneCheckerResponseObject = await zoneCheckerResponse.json();

          console.log('zoneCheckerResponseObject: ', zoneCheckerResponseObject);

          let message = 'Defect Report. Click OK to make changes\n\n';

          // making up zone report for prompt box
          for (let i in zoneCheckerResponseObject.data) {
            message = message + i + ': \n';
            for (let j in zoneCheckerResponseObject.data[i]) {
              message = message + ' ' + j.replace('_', '') + ': ';
              for (let k in zoneCheckerResponseObject.data[i][j]) {
                message += k + '->';
                for (let l in zoneCheckerResponseObject.data[i][j][k]) {
                  message +=
                    l + `(${zoneCheckerResponseObject.data[i][j][k][l]})`;
                  if (
                    Object.keys(zoneCheckerResponseObject.data[i][j][k])
                      .length > 1
                  ) {
                    message += ',';
                  }
                }
                if (
                  Object.keys(zoneCheckerResponseObject.data[i][j]).length >
                    1 &&
                  Object.keys(zoneCheckerResponseObject.data[i][j][k]).length ==
                    1
                ) {
                  message += ',';
                }
              }
              message += '\n';
            }
            message += '\n';
          }
          console.log('message: ', message);

          if (confirm(message) == true) {
            const mainResponse = await fetch(
              'http://localhost:8000/receive-thirdLayer-temp',
              {
                method: 'POST',
                headers: {
                  'Content-type': 'application/json',
                },
                body: JSON.stringify({
                  defectObj: defectLayerFormData,
                  mode,
                }),
              }
            );

            const mainResponseObject = await mainResponse.json();

            console.log('mainResponseObject: ', mainResponseObject);

            let finalMessage =
              'Defects Saved. Click OK to add more defects to the same body number\n\n';

            // making up zone report for prompt box
            for (let i in zoneCheckerResponseObject.data) {
              finalMessage = finalMessage + i + ': \n';
              for (let j in zoneCheckerResponseObject.data[i]) {
                finalMessage = finalMessage + ' ' + j.replace('_', '') + ': ';
                for (let k in zoneCheckerResponseObject.data[i][j]) {
                  finalMessage += k + '->';
                  for (let l in zoneCheckerResponseObject.data[i][j][k]) {
                    finalMessage +=
                      l + `(${zoneCheckerResponseObject.data[i][j][k][l]})`;
                    if (
                      Object.keys(zoneCheckerResponseObject.data[i][j][k])
                        .length > 1
                    ) {
                      finalMessage += ',';
                    }
                  }
                  if (
                    Object.keys(zoneCheckerResponseObject.data[i][j]).length >
                      1 &&
                    Object.keys(zoneCheckerResponseObject.data[i][j][k])
                      .length == 1
                  ) {
                    finalMessage += ',';
                  }
                }
                finalMessage += '\n';
              }
              finalMessage += '\n';
            }
            console.log('finalMessage: ', finalMessage);

            if (confirm(finalMessage) == false) {
              document.getElementById('followerForm').submit();
            } else {
              document.getElementById('firstLayerform').submit();
            }
          } else {
          }
        }
      }

      function handleReset() {
        document.getElementById('defectLayerForm').reset();
      }
    </script>
  </body>
</html>
