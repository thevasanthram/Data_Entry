<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="./filtering.css" />
    <title>Data Entry System</title>
    <script src="./canvasjs.min.js"></script>
  </head>
  <body>
    <div>
      <div class="nav-bar">
        <div class="user-mode">
          <div class="button-logout-content">
            <form action="/logout" method="get">
              <button type="submit" class="button-logout">Log-out</button>
            </form>
          </div>
          <div id="user-mode-name">
            <p><%= username %></p>
          </div>
        </div>
        <div class="app-name-div">
          <h2 id="app-name">Data Entry System</h2>
        </div>
      </div>
      <div id="title-name-content">
        <p id="title-name">Filtering Condition :</p>
      </div>
      <div class="filtering-condition-content">
        <div class="filtering-condition-form">
          <form action="/filtered-result" method="post" id="filterForm">
            <div class="from-date-condition-content">
              <p id="from-date-condition-topic">From :</p>
              <input type="date" name="fromDateCondition" id="from-date-condition-input" required/>
             </div>
            <div class="to-date-condition-content">
              <p id="to-date-condition-topic">To :</p>
              <input type="date" name="toDateCondition" id="to-date-condition-input" required />
            </div>
            <div class="chart-condition-content">
              <p id="chart-Condition-topic"> Report :</p>
              <div id="chart-condition-select-content">
                <select name="chartCondition" id="chart-condition-input" required>
                  <option value="DPV (Defects Per Vehicle) Report">DPV (Defects Per Vehicle) Report</option>
                  <option value="Master Report">Master Report</option>
                  <option value="Pareto Report">Pareto Report</option>
                  <option value="Surface Summary">Surface Summary</option>
                  <option value="Body Fitting Summary">Body Fitting Summary</option>
                  <option value="Missing & Wrong Part Summary">Missing & Wrong Part Summary</option>
                  <option value="Welding Summary">Welding Summary</option>
                  <option value="Water Leak Summary">Water Leak Summary</option>
                </select>
              </div>
            </div>
          </div>
          <button type="button" id="filtering-condition-submit-button" onclick="validate()">Generate</button>
        </form>
      </div>
      <div class="report-content">
        <div id="report-topic">
          <p id="report-topic-data"></p>
        </div>
        <div class="report-content-data">

        </div>
      </div>
    </div>

    <script>
      function validate(){
        var filterForm = document.getElementById('filterForm')

        if (!filterForm.checkValidity()) {
          if (filterForm.reportValidity) {
            filterForm.reportValidity();
          } else {
            alert(msg.ieErrorForm);
          }
        } else {
          var reportContentData = document.getElementsByClassName("report-content-data")[0];
          var childNodes = reportContentData.childNodes;
          Object.values(childNodes).map((child) => child.remove())
          document.getElementById('report-topic-data').innerHTML = ''
          generateReport()
        }
      }

      function generateReport(){
        var report = document.getElementById('chart-condition-input').value;
        document.getElementById('report-topic').style.color = '#ffffff'
        document.getElementById('report-topic-data').innerHTML = document.getElementById('chart-condition-input').value
        switch(report){
          case 'DPV (Defects Per Vehicle) Report': dpv(); break;
          case 'Master Report': master(); break;
          case 'Pareto Report': pareto(); break;
          case 'Surface Summary': individualSummary('Surface',['Dent','Bump','Burrs','Spatters','Others']); break;
          case 'Body Fitting Summary': individualSummary('Body Fitting',['Body Fitting 1','Body Fitting 2','Body Fitting 3','Body Fitting Others']); break;
          case 'Missing & Wrong Part Summary': individualSummary('Missing & Wrong Part',['Missing Part', 'Wrong Part']); break;
          case 'Welding Summary': individualSummary('Welding', ['Welding Part 1','Welding Part 2','Welding Part 3','Welding Part Others']); break;
          case 'Water Leak Summary': individualSummary('Water Leak',['Water Leak 1','Water Leak 2','Water Leak Others']); break;
          default: break;
        }
      }

      function dpv(){
        var fromDate = document.getElementById('from-date-condition-input').value
        var toDate = document.getElementById('to-date-condition-input').value

        var querySender = {
          'UB': [`SELECT * FROM defect_table WHERE category='UNDER BODY' and defect='Surface';`,`SELECT * FROM defect_table WHERE category='UNDER BODY' and defect='Body Fitting';`,`SELECT * FROM defect_table WHERE category='UNDER BODY' and defect='Missing & Wrong Part';`,`SELECT * FROM defect_table WHERE category='UNDER BODY' and defect='Welding';`,`SELECT * FROM defect_table WHERE category='UNDER BODY' and defect='Water Leak';`],
          'MB': [`SELECT * FROM defect_table WHERE (category='LH MAIN BODY' or category='RH MAIN BODY') and defect='Surface'`,`SELECT * FROM defect_table WHERE (category='LH MAIN BODY' or category='RH MAIN BODY') and defect='Body Fitting'`,`SELECT * FROM defect_table WHERE (category='LH MAIN BODY' or category='RH MAIN BODY') and defect='Missing & Wrong Part'`,`SELECT * FROM defect_table WHERE (category='LH MAIN BODY' or category='RH MAIN BODY') and defect='Welding'`,`SELECT * FROM defect_table WHERE (category='LH MAIN BODY' or category='RH MAIN BODY') and defect='Water Leak'`],
          'SB SA': [`SELECT * FROM defect_table WHERE (category='LH SHELL BODY SUB-LINE' or category='RH SHELL BODY SUB-LINE') and defect='Surface'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY SUB-LINE' or category='RH SHELL BODY SUB-LINE') and defect='Body Fitting'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY SUB-LINE' or category='RH SHELL BODY SUB-LINE') and defect='Missing & Wrong Part'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY SUB-LINE' or category='RH SHELL BODY SUB-LINE') and defect='Welding'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY SUB-LINE' or category='RH SHELL BODY SUB-LINE') and defect='Water Leak'`],
          'SB ML': [`SELECT * FROM defect_table WHERE (category='LH SHELL BODY MAIN-LINE' or category='RH SHELL BODY MAIN-LINE') and defect='Surface'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY MAIN-LINE' or category='RH SHELL BODY MAIN-LINE') and defect='Body Fitting'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY MAIN-LINE' or category='RH SHELL BODY MAIN-LINE') and defect='Missing & Wrong Part'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY MAIN-LINE' or category='RH SHELL BODY MAIN-LINE') and defect='Welding'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY MAIN-LINE' or category='RH SHELL BODY MAIN-LINE') and defect='Water Leak'`],
          'SM': [`SELECT * FROM defect_table WHERE (category='LEFT SIDE MEMBER' or category='RH SIDE MEMBER') and defect='Surface'`,`SELECT * FROM defect_table WHERE (category='LEFT SIDE MEMBER' or category='RH SIDE MEMBER') and defect='Body Fitting'`,`SELECT * FROM defect_table WHERE (category='LEFT SIDE MEMBER' or category='RH SIDE MEMBER') and defect='Missing & Wrong Part'`,`SELECT * FROM defect_table WHERE (category='LEFT SIDE MEMBER' or category='RH SIDE MEMBER') and defect='Welding'`,`SELECT * FROM defect_table WHERE (category='LEFT SIDE MEMBER' or category='RH SIDE MEMBER') and defect='Water Leak'`],
        }
        
        fetch('http://localhost:8000/reportDataProvider', {
          method: 'POST',
          headers: {
            'Content-type': 'application/json'
          },
          body: JSON.stringify({
            querySender,
            fromDate,
            toDate,
          })
        }).then((response) => response.json()).then((data) => {
          console.log(data.data)

          document.getElementById('report-topic-data').innerHTML = document.getElementById('chart-condition-input').value

          var reportContentData = document.getElementsByClassName('report-content-data')
          reportContentData[0].style.color = '#ffffff'


          var tbl = document.createElement('table');
          tbl.style.width = '100%';
          tbl.setAttribute('border', '1');
          reportContentData[0].appendChild(tbl)

          var tblRowforHeading = document.createElement('tr')
          tbl.appendChild(tblRowforHeading)

          var tableHeading = ['Section','Surface','Body Fitting','Missing & Wrong Part', 'Welding', 'Water Leak', 'Total', 'Total DPV']

          for(let i of tableHeading){
            var tblHeading = document.createElement('th')
            tblHeading.innerHTML = i
            tblRowforHeading.appendChild(tblHeading)
          }

          var horizontalTotalArray = [0,0,0,0,0]
          var horizontalTotalDPVArray = [0,0,0,0,0]
          var individualDefectTotal = [0,0,0,0,0]


          var i=0;

          for(let [key,value] of Object.entries(data.data)){
            var tblRowforData = document.createElement('tr')
            tbl.appendChild(tblRowforData)

            var tblDataforDefectName = document.createElement('td')
            tblDataforDefectName.innerHTML = key
            tblRowforData.appendChild(tblDataforDefectName)

            for(let j=0; j< value.length; j++){
              var tblDataforDefectName = document.createElement('td')
              tblDataforDefectName.innerHTML = value[j]
              tblRowforData.appendChild(tblDataforDefectName)

              horizontalTotalArray[i] += value[j]

              individualDefectTotal[j] += value[j]
            }
            var tblDataforTotal = document.createElement('td')
            tblDataforTotal.innerHTML = horizontalTotalArray[i]
            tblRowforData.appendChild(tblDataforTotal)

            var tblDataforTotalDPV = document.createElement('td')
            horizontalTotalDPVArray[i] = (horizontalTotalArray[i]/data.uniqueBodyNumberData.length)
            tblDataforTotalDPV.innerHTML = horizontalTotalDPVArray[i].toFixed(2)
            tblRowforData.appendChild(tblDataforTotalDPV)

            i++;
          }

          var tblRowforTotal = document.createElement('tr')
          tbl.appendChild(tblRowforTotal)

          var tblDataforTotal = document.createElement('td')
          tblDataforTotal.innerHTML = 'Total'
          tblRowforTotal.appendChild(tblDataforTotal)

          for(let j = 0; j < individualDefectTotal.length; j++){
            var tblDataforIndividualDefect = document.createElement('td')
            tblDataforIndividualDefect.innerHTML = individualDefectTotal[j]
            tblRowforTotal.appendChild(tblDataforIndividualDefect) 
          }

          var tblDataforHorizontalTotal = document.createElement('td')
          const horizontalTotal = horizontalTotalArray.reduce((partialSum, a) => partialSum + a, 0);
          tblDataforHorizontalTotal.innerHTML = horizontalTotal
          tblRowforTotal.appendChild(tblDataforHorizontalTotal)

          var tblDataforHorizontalTotalDPV = document.createElement('td')
          const horizontalTotalDPV = horizontalTotalDPVArray.reduce((partialSum, a) => partialSum + a, 0);
          tblDataforHorizontalTotalDPV.innerHTML = horizontalTotalDPV.toFixed(2)
          tblRowforTotal.appendChild(tblDataforHorizontalTotalDPV)

          var tblRowforProduction = document.createElement('tr')
          tbl.appendChild(tblRowforProduction)

          var tblDataforProduction = document.createElement('td')
          tblDataforProduction.colSpan = 7
          tblDataforProduction.innerHTML = 'Line off(Production)'
          tblRowforProduction.appendChild(tblDataforProduction)

          var tblDataforBodyNumbers = document.createElement('td')
          tblDataforBodyNumbers.innerHTML = data.uniqueBodyNumberData.length
          tblRowforProduction.appendChild(tblDataforBodyNumbers)

        }).catch((error) => {
          console.log(error)
        })
      }

     async function master(){
        var fromDate = document.getElementById('from-date-condition-input').value
        var toDate = document.getElementById('to-date-condition-input').value

        var querySender = {
          'UB': [`SELECT * FROM defect_table WHERE category='UNDER BODY' and defect='Surface';`,`SELECT * FROM defect_table WHERE category='UNDER BODY' and defect='Body Fitting';`,`SELECT * FROM defect_table WHERE category='UNDER BODY' and defect='Missing & Wrong Part';`,`SELECT * FROM defect_table WHERE category='UNDER BODY' and defect='Welding';`,`SELECT * FROM defect_table WHERE category='UNDER BODY' and defect='Water Leak';`],
          'MB': [`SELECT * FROM defect_table WHERE (category='LH MAIN BODY' or category='RH MAIN BODY') and defect='Surface'`,`SELECT * FROM defect_table WHERE (category='LH MAIN BODY' or category='RH MAIN BODY') and defect='Body Fitting'`,`SELECT * FROM defect_table WHERE (category='LH MAIN BODY' or category='RH MAIN BODY') and defect='Missing & Wrong Part'`,`SELECT * FROM defect_table WHERE (category='LH MAIN BODY' or category='RH MAIN BODY') and defect='Welding'`,`SELECT * FROM defect_table WHERE (category='LH MAIN BODY' or category='RH MAIN BODY') and defect='Water Leak'`],
          'SB SA': [`SELECT * FROM defect_table WHERE (category='LH SHELL BODY SUB-LINE' or category='RH SHELL BODY SUB-LINE') and defect='Surface'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY SUB-LINE' or category='RH SHELL BODY SUB-LINE') and defect='Body Fitting'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY SUB-LINE' or category='RH SHELL BODY SUB-LINE') and defect='Missing & Wrong Part'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY SUB-LINE' or category='RH SHELL BODY SUB-LINE') and defect='Welding'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY SUB-LINE' or category='RH SHELL BODY SUB-LINE') and defect='Water Leak'`],
          'SB ML': [`SELECT * FROM defect_table WHERE (category='LH SHELL BODY MAIN-LINE' or category='RH SHELL BODY MAIN-LINE') and defect='Surface'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY MAIN-LINE' or category='RH SHELL BODY MAIN-LINE') and defect='Body Fitting'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY MAIN-LINE' or category='RH SHELL BODY MAIN-LINE') and defect='Missing & Wrong Part'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY MAIN-LINE' or category='RH SHELL BODY MAIN-LINE') and defect='Welding'`,`SELECT * FROM defect_table WHERE (category='LH SHELL BODY MAIN-LINE' or category='RH SHELL BODY MAIN-LINE') and defect='Water Leak'`],
          'SM': [`SELECT * FROM defect_table WHERE (category='LEFT SIDE MEMBER' or category='RH SIDE MEMBER') and defect='Surface'`,`SELECT * FROM defect_table WHERE (category='LEFT SIDE MEMBER' or category='RH SIDE MEMBER') and defect='Body Fitting'`,`SELECT * FROM defect_table WHERE (category='LEFT SIDE MEMBER' or category='RH SIDE MEMBER') and defect='Missing & Wrong Part'`,`SELECT * FROM defect_table WHERE (category='LEFT SIDE MEMBER' or category='RH SIDE MEMBER') and defect='Welding'`,`SELECT * FROM defect_table WHERE (category='LEFT SIDE MEMBER' or category='RH SIDE MEMBER') and defect='Water Leak'`],
        }
        
        const response = await fetch('http://localhost:8000/reportDataProvider', {
          method: 'POST',
          headers: {
            'Content-type': 'application/json'
          },
          body: JSON.stringify({
            querySender,
            fromDate,
            toDate,
          })
        })
        const data = await response.json();
        
        document.getElementById('report-topic-data').innerHTML = document.getElementById('chart-condition-input').value
        var reportContentData = document.getElementsByClassName('report-content-data')
        reportContentData[0].style.color = '#ffffff'

        var tableHeading = ['Section','Surface','Body Fitting','Missing & Wrong Part', 'Welding', 'Water Leak', 'Total', 'Total DPV']

        var horizontalTotalArray = [0,0,0,0,0]
        var horizontalTotalDPVArray = [0,0,0,0,0]
        var individualDefectTotal = [0,0,0,0,0]

        var i=0;
        for(let [key,value] of Object.entries(data.data)){
          for(let j=0; j< value.length; j++){
            horizontalTotalArray[i] += value[j]
            individualDefectTotal[j] += value[j]
          }
          horizontalTotalDPVArray[i] = (horizontalTotalArray[i]/data.uniqueBodyNumberData.length)
          i++;
        }

        const horizontalTotal = horizontalTotalArray.reduce((partialSum, a) => partialSum + a, 0);
        const horizontalTotalDPV = horizontalTotalDPVArray.reduce((partialSum, a) => partialSum + a, 0);

        function findMajorDefect(position){
          switch(position){
            case 0: return 'Surface';break;
            case 1: return 'Body Fitting';break;
            case 2: return 'Missing & Wrong Part';break;
            case 3: return 'Welding';break;
            case 4: return 'Water Leak';break;
            default: break;
          }
        }

        const majorDefectsInAllGroup = {
          'UB': findMajorDefect(data.data.UB.indexOf(Math.max(...data.data.UB))),
          'MB': findMajorDefect(data.data.MB.indexOf(Math.max(...data.data.MB))),
          'SB SA': findMajorDefect(data.data['SB SA'].indexOf(Math.max(...data.data['SB SA']))),
          'SB ML': findMajorDefect(data.data['SB ML'].indexOf(Math.max(...data.data['SB ML']))),
          'SM': findMajorDefect(data.data.SM.indexOf(Math.max(...data.data.SM))),
        }
        const newResponse = await fetch('http://localhost:8000/majorDefectDetail' , {
          method: 'POST',
          headers: {
            'Content-type': 'application/json'
          },
          body: JSON.stringify({
            majorDefectsInAllGroup,
            fromDate,
            toDate,
          })
        })

        const majorDefectsDataAllGroup = await newResponse.json()
        const majorDefectsDataInAllGroup = majorDefectsDataAllGroup.data;

        console.log('majorDefectsInAllGroup:',majorDefectsInAllGroup)
        console.log('majorDefectsDataInAllGroup:',majorDefectsDataInAllGroup)

        // const array = [    
        //   { y: 3, label: "Dent" },
        //   { y: 0,  label: "Bump" },
        //   { y: 0,  label: "Burrs" },
        //   { y: 0,  label: "Spatters" },
        //   { y: 0,  label: "Others" },
        // ]

        const labelSetForMajorDefects = []
        const labelSetForMajorDefectsTitle = Object.values(majorDefectsInAllGroup)
        Object.keys(majorDefectsDataInAllGroup).map( (group) => {
          let tempArr = []
          Object.keys(majorDefectsDataInAllGroup[group]).map( (defect) => {
            tempArr.push({y: majorDefectsDataInAllGroup[group][defect] , label: defect})
          })
          labelSetForMajorDefects.push(tempArr)
        } )

        console.log('labelSetForMajorDefects: ', labelSetForMajorDefects)
        
        console.log('Total DPV: ', horizontalTotalDPV)
        console.log('Category wise: ', individualDefectTotal)
        console.log('Group wise: ', horizontalTotalArray)
        console.log('Individual Group defects:',data.data)
        console.log('Group wise Total DPV: ',horizontalTotalDPVArray)

        var reportContent = document.getElementsByClassName('report-content-data')[0]

        var firstSection = document.createElement('div')
        firstSection.id = 'firstSection'
        reportContent.appendChild(firstSection)

        var totalDPV = document.createElement('div')
        totalDPV.id = 'totalDPV'
        totalDPV.style.width = '30%'
        totalDPV.style.marginLeft = '2%'
        firstSection.appendChild(totalDPV)

        var totalDPVChart= new CanvasJS.Chart("totalDPV", {
          animationEnabled: true,
          backgroundColor: "rgba(0, 0, 0, 0)",
          theme: "dark1", // "light1", "light2", "dark1", "dark2"
          title:{
            text: "Total DPV",
            fontFamily: 'tahoma',
            fontSize: 18,
          },
          axisX: {
            title: "No of Vehicle",
            titleFontFamily: 'tahoma'
          },
          axisY: {
            title: "Defects per Vehicle",
            titleFontFamily: 'tahoma'
          },
          data: [{        
            type: "column",  
            dataPoints: [      
              { y: horizontalTotalDPV, label: "1" },
            ]
          }]
        });

        totalDPVChart.render();


        var categoryWise = document.createElement('div')
        categoryWise.id = 'categoryWise'
        categoryWise.style.width = '30%'
        categoryWise.style.marginLeft = '35%'
        firstSection.appendChild(categoryWise)

        var categoryWiseChart = new CanvasJS.Chart("categoryWise", {
          animationEnabled: true,
          backgroundColor: "rgba(0, 0, 0, 0)",
          theme: "dark1",
          title:{
            text: "Category DPV",
            fontFamily: 'tahoma',
            fontSize: 18,
            // horizontalAlign: "left"
          },
          data: [{
            type: "doughnut",
            startAngle: 60,
            // innerRadius: 70,
            indexLabelFontSize: 15,
            indexLabel: "{label} - {y}, #percent%",
            toolTipContent: "<b>{label}:</b> {y} (#percent%)",
            dataPoints: [
              { y: individualDefectTotal[0], label: "Surface" },
              { y: individualDefectTotal[1], label: "Body Fitting" },
              { y: individualDefectTotal[2], label: "Missing & Wrong Part" },
              { y: individualDefectTotal[3], label: "Welding"},
              { y: individualDefectTotal[4], label: "Water Leak"},
            ]
          }]
        });

        categoryWiseChart.render();


        var groupWise = document.createElement('div')
        groupWise.id = 'groupWise'
        groupWise.style.width = '30%'
        groupWise.style.marginLeft = '68%'
        firstSection.appendChild(groupWise)

        var groupWiseChart = new CanvasJS.Chart("groupWise", {
          animationEnabled: true,
          backgroundColor: "rgba(0, 0, 0, 0)",
          theme: "dark1",
          title:{
            text: "Group DPV",
            fontFamily: 'tahoma',
            fontSize: 18,
            // horizontalAlign: "left"
          },
          data: [{
            type: "doughnut",
            startAngle: 60,
            // innerRadius: 70,
            indexLabelFontSize: 15,
            indexLabel: "{label} - {y}, #percent%",
            toolTipContent: "<b>{label}:</b> {y} (#percent%)",
            dataPoints: [
              { y: horizontalTotalArray[0], label: "UB" },
              { y: horizontalTotalArray[1], label: "MB" },
              { y: horizontalTotalArray[2], label: "SB SA" },
              { y: horizontalTotalArray[3], label: "SB ML"},
              { y: horizontalTotalArray[4], label: "SM"},
            ]
          }]
        });

        groupWiseChart.render();


        const groupName = ['UNDER BODY', 'MAIN BODY', 'SHELL BODY SUB-LINE','SHELL BODY MAIN-LINE','SIDE MEMBER']
        const groupID = ['UB','MB','SBSA','SBML','SM']
        const groupKeyForDataObj = ['UB','MB','SB SA','SB ML','SM']

        var groupDPVChart = [];
        var individualGroupWisechart = [];
        var groupWiseMajorDefectChart = [];

        for(let i = 0; i < 5; i++){
          var divElement = document.createElement('div');
          divElement.id=`${groupID[i]}`
          divElement.style.marginTop = `30%`
          reportContent.appendChild(divElement)

          var groupTitleDiv = document.createElement('div')
          groupTitleDiv.id = `${groupID[i]}_titleName`
          groupTitleDiv.style.textAlign = 'center'
          if(i>0){
            groupTitleDiv.style.paddingTop = '4%'
          }
          groupTitleDiv.style.marginBottom = '3%'
          divElement.appendChild(groupTitleDiv)

          var groupTitleContent = document.createElement('p')
          groupTitleContent.innerHTML = groupName[i]
          groupTitleContent.style.fontSize = '130%'
          groupTitleDiv.appendChild(groupTitleContent)

          var horizontalRule = document.createElement('hr')
          groupTitleDiv.appendChild(horizontalRule)

          var groupTotalDPV = document.createElement('div')
          groupTotalDPV.id=`${groupID[i]}_TotalDPV`
          groupTotalDPV.style.width = '30%'
          groupTotalDPV.style.marginLeft = '2%'
          // groupTotalDPV.style.marginTop = '30%'
          divElement.appendChild(groupTotalDPV)

          groupDPVChart.push(new CanvasJS.Chart( groupTotalDPV.id, {
            animationEnabled: true,
            backgroundColor: "rgba(0, 0, 0, 0)",
            theme: "dark1",
            title:{
              text: `${groupName[i]} DPV`,
              fontFamily: 'tahoma',
              fontSize: 18,
            },
            axisX: {
              title: "No of Vehicle"
            },
            axisY: {
              title: "Defects per Vehicle"
            },
            data: [{        
              type: "column",  
              dataPoints: [      
                { y: horizontalTotalDPVArray[i], label: "1" },
              ]
            }]
          }));

          groupDPVChart[i].render();


          var categoryWiseChartDivision= document.createElement('div')
          categoryWiseChartDivision.id=`${groupID[i]}_Category_DPV`
          categoryWiseChartDivision.style.width = '30%'
          categoryWiseChartDivision.style.marginLeft = '35%'
          // categoryWiseChartDivision.style.marginTop = '30%'
          divElement.appendChild(categoryWiseChartDivision)

          individualGroupWisechart.push(new CanvasJS.Chart(categoryWiseChartDivision.id, {
            animationEnabled: true,
            backgroundColor: "rgba(0, 0, 0, 0)",
            theme: "dark1", // "light1", "light2", "dark1", "dark2"
            title:{
              text: "Category DPV",
              fontFamily: 'tahoma',
              fontSize: 18,
            },
            axisX: {
              title: "Category"
            },
            axisY: {
              title: "Total no of defects"
            },
            data: [{        
              type: "column",  
              dataPoints: [    
                { y: data.data[groupKeyForDataObj[i]][0], label: "Surface" },
                { y: data.data[groupKeyForDataObj[i]][1],  label: "Body Fitting" },
                { y: data.data[groupKeyForDataObj[i]][2],  label: "Missing & Wrong Part" },
                { y: data.data[groupKeyForDataObj[i]][3],  label: "Welding" },
                { y: data.data[groupKeyForDataObj[i]][4],  label: "Water Leak" },
              ]
            }]
          }));

          individualGroupWisechart[i].render();


          var groupWiseMajorDefectChartDivision= document.createElement('div')
          groupWiseMajorDefectChartDivision.id=`${groupID[i]}_GroupWise_Major_Defect_Counts`
          groupWiseMajorDefectChartDivision.style.width = '30%'
          groupWiseMajorDefectChartDivision.style.marginLeft = '68%'
          divElement.appendChild(groupWiseMajorDefectChartDivision)

          groupWiseMajorDefectChart.push(new CanvasJS.Chart(groupWiseMajorDefectChartDivision.id, {
            animationEnabled: true,
            backgroundColor: "rgba(0, 0, 0, 0)",
            theme: "dark1", // "light1", "light2", "dark1", "dark2"
            title:{
              text: `${labelSetForMajorDefectsTitle[i]} Category`,
              fontFamily: 'tahoma',
              fontSize: 18,
            },
            axisX: {
              title: "Sub-Defects"
            },
            axisY: {
              title: "Total no of defects"
            },
            data: [{        
              type: "column",  
              dataPoints: labelSetForMajorDefects[i]
            }]
          }))

          groupWiseMajorDefectChart[i].render();
        }
      }


      function pareto(){ 
        document.getElementById('report-topic-data').innerHTML = document.getElementById('chart-condition-input').value
        console.log('pareto');
      }
      function individualSummary(majorDefectName, minorDefectsList){
        document.getElementById('report-topic-data').innerHTML = document.getElementById('chart-condition-input').value
        console.log(SummaryName);

        var fromDate = document.getElementById('from-date-condition-input').value
        var toDate = document.getElementById('to-date-condition-input').value

        fetch('http://localhost:8000/individualSummaryReport',{
          method: 'POST',
          headers:{
            'Content-type': 'application/json'
          },
          body: JSON.stringify({
            majorDefectName,
            minorDefectsList,
            fromDate,
            toDate
          })
        })
      }
    </script>

  </body>
</html>
